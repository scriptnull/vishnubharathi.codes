<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vishnu Bharathi</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vishnubharathi.codes/"/>
  <updated>2024-03-11T01:24:42.095Z</updated>
  <id>https://vishnubharathi.codes/</id>
  
  <author>
    <name>Vishnu Bharathi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rough notes on GCP networking</title>
    <link href="https://vishnubharathi.codes/blog/rough-notes-on-google-cloud-networking/"/>
    <id>https://vishnubharathi.codes/blog/rough-notes-on-google-cloud-networking/</id>
    <published>2024-03-11T00:52:46.000Z</published>
    <updated>2024-03-11T01:24:42.095Z</updated>
    
    <content type="html"><![CDATA[<p>I am publishing my rough notes on Google Cloud networking which I collected while watching the first few episodes of the <a href="https://www.youtube.com/watch?v=0hN-dyOV10c&amp;list=PLDGXb-1k3XY1RaEfzp_nDSJMPP0iAQEtP">Google Cloud Networking playlist</a>. lol, I don’t know how many more times I will need to revise them.</p><p>(Any images seen here are attributed to the presentation in the video series mentioned above. This blog post is more like watching those videos on fast-forward and I would definitely encourage you to check out the videos if you would like more clarity)</p><h2 id="VPC"><a href="#VPC" class="headerlink" title="VPC"></a>VPC</h2><ul><li>VPC is a global construct<ul><li>You can create subnets that belong to a different region</li></ul></li><li>Shared VPC<ul><li>One host project has VPC and subnets</li><li>Share all or some subnets with other projects that host the project-level service</li></ul></li></ul><h2 id="Interconnecting-to-Google-Cloud"><a href="#Interconnecting-to-Google-Cloud" class="headerlink" title="Interconnecting to Google Cloud"></a>Interconnecting to Google Cloud</h2><ul><li>Layer 3<ul><li>Dedicated (Direct peering)</li><li>Shared (Carrier peering)</li><li>Needs VPN setup to tunnel into private address space</li><li>No SLAs</li><li>Free of cost (but check latest)</li></ul></li><li>Layer 2<ul><li>Dedicated Interconnect<ul><li>Costly (because Gcloud has dedicated hardware)</li><li>Dedicated bandwidth</li></ul></li><li>Partner Interconnect<ul><li>Example: Equinix fabric</li><li>Shared bandwidth other people who are using the interconnect</li></ul></li><li>Has SLA</li></ul></li></ul><h2 id="Routing"><a href="#Routing" class="headerlink" title="Routing"></a>Routing</h2><ul><li>Pre-programmed routes<ul><li>Automatically created.</li><li>User can’t delete or change these routes</li><li>Subnet routes are automatically created when a subnet is added to the network</li></ul></li><li>Default routes<ul><li>Pre-programmed 0.0.0.0/0 route to an internet gateway</li><li>Unlike pre-programmed routes, this can be changed.</li></ul></li><li>Cloud Router (CR)<br>collapsed:: true<ul><li>Cloud Router is similar to a traditional router but has differences that are important to understand</li><li>In a traditional router, a router provides two functionalities<ul><li>Control plane functionality - BGP route communication mechanisms.</li><li>Data plane functionality - packets go into the router and the router makes the decision of where to route it.</li></ul></li><li>Cloud router is a “control-plane” only device. Think about it as a BGP speaker. This only speaks BGP, but the routers that you have on-prem might speak other protocols.</li><li>What does Cloud Router do?<ul><li>Learns routes dynamically, configures routing tables, and pushes those routing tables to the VMs themselves.</li><li>So when a VM wants to send packets to another VM, it is a host-to-host communication rather than pushing the packet to a router and the router making a choice to reach the destination.</li></ul></li><li>It is a Google-managed process, controlled by you, that runs on a Google host. If it fails, Google Cloud will automatically try to restart it. However, the routing from host to host is not affected during this period since it is not a data plane device. BGP connectivity will be lost during this time, so you can’t add new routes. The best practice would be to run two cloud routers always.</li><li>Two routing modes<ul><li>(can be enabled when setting up your VPC)</li><li>Regional routing<ul><li>CR was brought up in a region. So it can only learn about the subnets in that particular region.</li><li>Be careful about using these because when a load balancer tries to reach something in us-west-1 but the request ends up in the CR present in us-east-1, then a black hole is created. (i.e. request is not able to be routed to us-west-1 because regional CR doesn’t even know that us-west-1 exists)</li></ul></li><li>Global routing<ul><li>Allows CR to pick up all the subnets in a VPC</li></ul></li></ul></li><li>Route Priority<ul><li>Route Priority is equivalent to the BGP MED metric (multi-exit discriminator)</li><li>Local routes have default MED (1000 if not changed)</li><li>Routes from other regions have a metric based on RTT added to the default MED value.</li><li>If you have multiple interconnects, you can use route priority to tell the preference order of where the request needs to go.</li></ul></li></ul></li><li>Advanced Route<ul><li>Static forwarding to a VPN gateway when cloud routers/dynamic routing isn’t used.</li><li>Force some IPs to be routed to a third-party service</li></ul></li></ul><h2 id="VPC-Peering"><a href="#VPC-Peering" class="headerlink" title="VPC Peering"></a>VPC Peering</h2><ul><li>In case of VPNs, you can adverstise only a few subnets between network. In case of VPC peering, it is binary. All subnets in VPC A will get advertised to all subnets in VPC B and vice versa. You are basically smashing two VPCs.</li><li>Security policies still exist in both the VPCs and there is no “single” security policy for the smashed up VPC. So, if something is going wrong, check the firewall rules associated with both VPCs.</li><li>Can not have overlapping IP ranges</li><li>Non-transitive in nature</li><li>Quotas and Limits:<ul><li>15,500 total VMs across all peering relationships</li><li>A network can have upto 25 peered networks</li></ul></li></ul><h2 id="Load-Balancers"><a href="#Load-Balancers" class="headerlink" title="Load Balancers"></a>Load Balancers</h2><ul><li>Families (based on where they face)<ul><li>External load balancer: Internet-facing</li><li>Internal load balancer: Internal to google cloud</li></ul></li><li>Families (based on where they route to)<ul><li>Global</li><li>Regional</li></ul></li><li>Families (based on the level they operate at)<ul><li>Network Load balancers<ul><li>Layer 3 and 4.</li><li>These are external load balancers (internet-facing)</li><li>These are regional load balancers.</li><li>Highly available with multiple zones</li><li>Load balance TCP/UDP traffic and does not look at L7</li><li>Client IP is preserved, don’t need x-forwarded-for</li><li>It does not perform SSL termination, so your backend needs to do it</li><li>Client access can be controlled with the VPC Firewall</li><li>Balances traffic using 2, 3, or 5-tuple hashing<ul><li>2 tuple: {sourceIp, destIP}</li><li>3 tuple: {sourceIp, destIP, Protocol}</li><li>5 tuple: {sourceIp, destIP, sourcePort, destPort, Protocol}</li></ul></li><li>Session Affinity based on IP address</li><li>High performance = 1 million+ requests per second</li></ul></li><li>DNS-based Global LB<ul><li>This is how traditional public cloud usually had load balancing. But not how Google cloud load balancing works.</li><li><img src="https://github.com/scriptnull/vishnubharathi.codes/assets/4211715/145bb23d-d996-4292-bf20-26cbfc880b2b" alt="image"></li><li>IP address of servers in different region are added as DNS entries for the domain.</li><li>The DNS server gives back the IP address when requested in a load balancer fashion (like round robin)</li><li>Disadvantage: DNS caching happens at multiple places (web browsers, internet providers ec.), so it might be pointing to a invalid IP address at one of those layers</li></ul></li><li>Google Global Load Balancer (L7)<ul><li>Built for powering Google search, Gmail and other Google products and then adopted inside Google cloud</li><li><img src="https://github.com/scriptnull/vishnubharathi.codes/assets/4211715/0e178e1f-c9c9-472b-9506-f76385ae5870" alt="image"></li></ul></li><li>Single Global Anycast VIP (IPv4/IPv6) across region</li><li>Cross-region failure and fallback</li><li>Fast autoscaling</li><li>Highly available</li><li>Single point to apply global policies</li></ul></li><li>Internal Load Balancers<ul><li><img src="https://github.com/scriptnull/vishnubharathi.codes/assets/4211715/e918cf25-7f13-4697-8fb2-a8550125a5b0" alt="image"></li></ul></li><li>L4 Regional LB<ul><li>Internal (RFC 1918) VIP</li><li>Client IP Preserved</li><li>TCP, HTTP, HTTPS health checks</li><li>No middle proxy (delivered through SDN), High performance, and no chokepoints</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I am publishing my rough notes on Google Cloud networking which I collected while watching the first few episodes of the &lt;a href=&quot;https:/
      
    
    </summary>
    
    
      <category term="devops" scheme="https://vishnubharathi.codes/tags/devops/"/>
    
      <category term="cloud" scheme="https://vishnubharathi.codes/tags/cloud/"/>
    
  </entry>
  
  <entry>
    <title>Infinite ways</title>
    <link href="https://vishnubharathi.codes/blog/infinite-ways/"/>
    <id>https://vishnubharathi.codes/blog/infinite-ways/</id>
    <published>2024-01-12T22:40:00.000Z</published>
    <updated>2024-03-11T01:24:42.091Z</updated>
    
    <content type="html"><![CDATA[<p>I was reading through the <a href="https://lamport.azurewebsites.net/tla/book-21-07-04.pdf">Specifying systems</a> book few hours back where I came across this beautiful insight.</p><blockquote><p>Mathematics provides infinitely many ways of expressing the same thing</p></blockquote><p>Take the number 12. There are infinite number of ways to express it.</p><p>expr 1) 6 + 6</p><p>expr 2) 3 * 4</p><p>expr 3) 141 - 129</p><p>expr 4) 4353475 - (4353462 + 1)</p><p>All the above expressions evaluate to 12. When options are infinte, how to express something?</p><p>The same question applies to writing formal specifications and programming.</p><p>The advice from the book is simple:</p><blockquote><p>…, then you can choose the one that you feel makes the specification easiest to understand.</p></blockquote><p>Yes, choose the one that makes it the easiest to READ it at a future point.</p><p>Example: Someone might find it OKAY to choose (expr 3) above to express 12. Reason behind it being, “come on, it is not that complex!”. Especially it is not as complex as (expr 4). But when others (or the same person) read it at a future point in time, they might wonder, “why didn’t we choose (expr 1) or (expr 2)”.</p><p>I have seen the equivalent of this happening in programming.</p><p>My advice for anyone (especially if you are getting started with programming and are in that phase where you get excited about different programming languages and their features) would be:</p><p>If there are two ways to express something, choose the one that will be the easiest to read and understand at a future point in time by a human and not the compiler.</p><p>~ ~ ~ ~</p><p>Optimize for reads, when writing.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I was reading through the &lt;a href=&quot;https://lamport.azurewebsites.net/tla/book-21-07-04.pdf&quot;&gt;Specifying systems&lt;/a&gt; book few hours back wh
      
    
    </summary>
    
    
      <category term="mathematics" scheme="https://vishnubharathi.codes/tags/mathematics/"/>
    
  </entry>
  
  <entry>
    <title>Paper notes: Use of Formal Methods at Amazon Web Services</title>
    <link href="https://vishnubharathi.codes/blog/paper-notes-use-of-formal-methods-at-amazon-web-services/"/>
    <id>https://vishnubharathi.codes/blog/paper-notes-use-of-formal-methods-at-amazon-web-services/</id>
    <published>2023-11-08T22:26:53.000Z</published>
    <updated>2024-03-11T01:24:42.095Z</updated>
    
    <content type="html"><![CDATA[<p>It has been a while since I posted paper notes or anything at all in this blog. Luckily, I got curious last night about “How are distributed systems tested?”. My curiosity was evoked by these factors:</p><ul><li>I keep on hearing about “Deterministic Simulation Testing” used in the <a href="https://github.com/tigerbeetle/tigerbeetle">TigerBeetle</a> project. I wonder what it is and what are the other methods to test distributed systems.</li><li>I have been wanting to add “High Availability” modes in <a href="https://github.com/scriptnull/waymond">my little side project</a> and I wanted to understand how to test the high availability of the system before declaring it to be highly available :D</li><li>Maybe there are some lessons that I can take away for designing and implementing different testing strategies at <a href="https://hasura.io/">my current work</a>.</li></ul><p>With those very good enough reasons, I stumbled upon <a href="https://github.com/asatarin/testing-distributed-systems">this awesome github repo</a> which curates various testing strategies for distributed systems. One of the things that stood out for me in that list was “Formal methods”, more specifically “TLA+”. It then led me to watch <a href="https://youtu.be/sPSPEgz3o9U?si=oyvODVhHCr5l7ZnQ">this awesome conference video</a> where they compare TLA+ and <a href="https://jepsen.io/">Jepsen</a>/<a href="https://github.com/jepsen-io/maelstrom">Maelstrom</a> - the video made me feel excited about both the technologies. A quick lesson from the video: TLA+ is apples and Jepsen is oranges - we would ideally want to eat both.</p><p>I then decided to learn more about TLA+ since that comes in the earlier stages of the design process. I have previously attempted to learn TLA+ but couldn’t succeed in it successfully - mainly due to a lack of motivation in the middle of the learning process. So, I wanted to be motivated enough this time before attempting to learn it again and try to use it in my side project or at work. This line of thinking made me remember that AWS had published a paper about TLA+ that I had heard of in the past. So I decided to pick it up and read it.</p><p>You can get a copy of it from <a href="https://www.amazon.science/publications/how-amazon-web-services-uses-formal-methods">here</a>.</p><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>This paper is an experience report from the Engineers who spearheaded the moment of using formal methods to verify complex distributed systems that were getting built at AWS such as S3, Dynamodb, etc. At first, they didn’t think of formal methods and were investing in other types of testing. Those tests helped but there were still edge cases that could cause serious bugs.</p><p>They open up with the scale that they are dealing with here.</p><blockquote><p>As an example of this growth; in 2006 we launched S3, our Simple Storage Service. In the 6 years after launch, S3 grew to store 1 trillion objects [1]. Less than a year later it had grown to 2 trillion objects, and was regularly handling 1.1 million requests per second [2].</p></blockquote><p>Imagine that you were about to design a system for such a high scale and growth - how will you gain confidence about its design and correctness? If you are making any changes to the system at some point, how will you be confident about the effects of your changes?</p><p>The first line of defense in order to gain that confidence is using formal methods to specify and check your system design. Once we made sure that our design is correct, then we start to implement it and write “tests” which check the correctness of the code (this is the classic software testing bit that we are used to).</p><h2 id="Precise-Designs"><a href="#Precise-Designs" class="headerlink" title="Precise Designs"></a>Precise Designs</h2><p>What do most of us do most of the time while designing systems?</p><blockquote><p>… conventional design documents consist of prose, static diagrams, and perhaps pseudo-code in an ad hoc untestable language. Such descriptions are far from precise; they are often ambiguous, or omit critical aspects such as partial failure or the granularity of concurrency (i.e. which constructs are assumed to be atomic).</p></blockquote><p>I have noticed this divergence between the reality and the design doc/diagrams in day-to-day engineering. What if we wrote something during that process of creating those beautiful diagrams and design docs - something that is more detailed and helps us down the line when we are trying to alter the system? That something turned out to be TLA+ for AWS.</p><blockquote><p>TLA+ is based on simple discrete math, i.e. basic set theory and predicates, with which all engineers are familiar. A TLA+ specification describes the set of all possible legal behaviors (execution traces) of a system.</p></blockquote><blockquote><p>TLA+ is intended to make it as easy as possible to show that a system design correctly implements the desired correctness properties, either via conventional mathematical reasoning, or more easily and quickly by using tools such as the TLC model checker [5], a tool which takes a TLA+ specification and exhaustively checks the desired correctness properties across all of the possible execution traces.</p></blockquote><blockquote><p>TLA+ is accompanied by a second language called PlusCal which is closer to a C-style programming language, but much more expressive as it uses TLA+ for expressions and values. In fact, PlusCal is intended to be a direct replacement for pseudo-code.</p></blockquote><h2 id="The-Value-of-Formal-Methods-for-‘Real-world-Systems’"><a href="#The-Value-of-Formal-Methods-for-‘Real-world-Systems’" class="headerlink" title="The Value of Formal Methods for ‘Real-world Systems’"></a>The Value of Formal Methods for ‘Real-world Systems’</h2><blockquote><p>In industry, formal methods have a reputation of requiring a huge amount of training and effort to verify a tiny piece of relatively straightforward code, so the return on investment is only justified in safety-critical domains such as medical systems and avionics. Our experience with TLA+ has shown that perception to be quite wrong.</p></blockquote><p>Excellent, that is exactly what I needed to hear. They also provided this nice table of real world things:</p><p><img src="https://github.com/scriptnull/vishnubharathi.codes/assets/4211715/fc2e094e-f7b9-4e26-b139-c99d5cc7baf8" alt="image"></p><h2 id="Side-Benefit-A-Better-Way-to-Design-Systems"><a href="#Side-Benefit-A-Better-Way-to-Design-Systems" class="headerlink" title="Side Benefit: A Better Way to Design Systems"></a>Side Benefit: A Better Way to Design Systems</h2><blockquote><p>TLA+ has been helping us shift to a better way of designing systems. Engineers naturally focus on designing the ‘happy case’ for a system</p></blockquote><p>and</p><blockquote><p>Once the design for the happy case is done, the engineer then tries to think of “what might go wrong?”, based on personal experience and that of colleagues and reviewers.<br>…. Almost always, the engineer stops well short of handling ‘extremely rare’ combinations of events, as there are too many such scenarios to imagine.</p></blockquote><p>and</p><blockquote><p>In contrast, when using formal specification we begin by precisely stating “what needs to go right?”<br>….</p><ul><li>Safety properties: “what the system is allowed to do”</li><li>Liveness properties: “what the system must eventually do”</li></ul></blockquote><p>After we define those properties, we will need to see if those hold true for various kind of things that can happen in the system.</p><blockquote><p>Next, with the goal of confirming that our design correctly handles all of the dynamic events in the environment, we specify the effects of each of those possible events; e.g. network errors and repairs, disk errors, process crashes and restarts, data center failures and repairs, and actions by human operators.</p></blockquote><p>So there should be a way to model these events in the system too. (The video that I mentioned at the top helped me digest this portion of the paper more easily)</p><blockquote><p>We have found this rigorous “what needs to go right?” approach to be significantly less error prone than the ad hoc “what might go wrong?” approach.</p></blockquote><h2 id="More-Side-Benefits-Improved-Understanding-Productivity-and-Innovation"><a href="#More-Side-Benefits-Improved-Understanding-Productivity-and-Innovation" class="headerlink" title="More Side Benefits: Improved Understanding, Productivity and Innovation"></a>More Side Benefits: Improved Understanding, Productivity and Innovation</h2><blockquote><p>In several cases we have prevented subtle, serious bugs from reaching production. In other cases we have been able to make innovative performance optimizations – e.g. removing or narrowing locks, or weakening constraints on message ordering – which we would not have dared to do without having model checked those changes.</p></blockquote><p>Awesome!</p><h2 id="What-Formal-Specification-Is-Not-Good-For"><a href="#What-Formal-Specification-Is-Not-Good-For" class="headerlink" title="What Formal Specification Is Not Good For"></a>What Formal Specification Is Not Good For</h2><p>They are interested in two things</p><blockquote><p>1) bugs and operator errors that cause a departure from the logical intent of the system, and</p><p>2) surprising ‘sustained emergent performance degradation’ of complex systems that inevitably contain feedback loops.</p></blockquote><p>(1) is achievable via formal methods but not (2). They give a good example of what (2) would look like and they mention that they have other ways to mitigate those.</p><h2 id="First-Steps-To-Formal-Methods"><a href="#First-Steps-To-Formal-Methods" class="headerlink" title="First Steps To Formal Methods"></a>First Steps To Formal Methods</h2><p>This and the upcoming sections of the paper are well narrated and I felt like I was watching a documentary movie while reading these sections.</p><p>One another option that they were considering was <a href="https://en.wikipedia.org/wiki/Alloy_(specification_language">Alloy</a>) as they found evidence of its usage.</p><blockquote><p>Zave used a language called Alloy to find serious bugs in the membership protocol of a distributed system called Chord. Chord was designed by a strong group at MIT and is certainly successful; it won a ’10-year test of time’ award at SIGCOMM 2011</p></blockquote><p>But they chose TLA+ over Alloy as it was not as expressive as they needed it to be.</p><blockquote><p>Eventually C.N. stumbled across a language with those properties when he found a TLA+ specification in the appendix of a paper on a canonical algorithm in our problem domain: the Paxos consensus algorithm</p><p>The fact that TLA+ was created by the designer of such a widely used algorithm gave us some confidence that TLA+ worked for real-world systems.</p></blockquote><p>Yeah, TLA+ was invented by <a href="https://en.wikipedia.org/wiki/Leslie_Lamport">Leslie Lamport</a> who given us with some of the coolest research that are getting used in a lot of stuff.</p><h2 id="First-Big-Success-at-Amazon"><a href="#First-Big-Success-at-Amazon" class="headerlink" title="First Big Success at Amazon"></a>First Big Success at Amazon</h2><blockquote><p>T.R. says that, had he known about TLA+ before starting work on DynamoDB, he would have used it from the start. He believes that the investment he made in writing and checking the formal TLA+ specifications was both more reliable, and also less time consuming than the work he put into writing and checking his informal proofs.</p></blockquote><h2 id="Persuading-More-Engineers-Leads-to-Further-Successes"><a href="#Persuading-More-Engineers-Leads-to-Further-Successes" class="headerlink" title="Persuading More Engineers Leads to Further Successes"></a>Persuading More Engineers Leads to Further Successes</h2><p>Totally love this section. I would use the techniques mentioned here if I were to introduce formal methods and verification to other engineers.</p><blockquote><p>This raised a challenge; how to convey the purpose and benefits of formal methods to an audience of software engineers? Engineers think in terms of debugging rather than ‘verification’, so we called the presentation “Debugging Designs”</p></blockquote><p>and</p><blockquote><p>Continuing that metaphor, we have found that software engineers more readily grasp the concept and practical value of TLA+ if we dub it:</p><p>Exhaustively testable pseudo-code</p></blockquote><p>One another thing that I saw that I didn’t expect was</p><blockquote><p>Most recently we discovered that TLA+ is an excellent tool for data modeling, e.g. designing the schema for a relational or ‘No SQL’ database.</p></blockquote><p>Wow, his helped them in coming up with a better schema!</p><h2 id="The-Most-Frequently-Asked-Question"><a href="#The-Most-Frequently-Asked-Question" class="headerlink" title="The Most Frequently Asked Question"></a>The Most Frequently Asked Question</h2><blockquote><p>“How do we know that the executable code correctly implements the verified design?”</p></blockquote><p>We don’t, but</p><blockquote><p>Formal methods help engineers to get the design right, which is a necessary first step toward getting the code right. If the design is broken then the code is almost certainly broken, as mistakes during coding are extremely unlikely to compensate for mistakes in design. Worse, engineers will probably be deceived into believing that the code is ‘correct’ because it appears to correctly implement the (broken) design. Engineers are unlikely to realize that the design is incorrect while they are focusing on coding.</p></blockquote><h2 id="Alternatives-to-TLA"><a href="#Alternatives-to-TLA" class="headerlink" title="Alternatives to TLA+"></a>Alternatives to TLA+</h2><p>Seems like they published a whole other paper on this topic.</p><blockquote><p>When we found that TLA+ met those requirements, we stopped evaluating methods, as our goal was always practical engineering rather than an exhaustive survey.</p></blockquote><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>I hope you enjoyed this post and got the urge to explore and learn TLA+ - I feel this has the power to change the way we think and reason about our systems. I hope to write up more when I try to use it in real-world situations.</p><p>From here, I would like to read <a href="https://brooker.co.za/blog/2013/01/20/two-phase.html">this</a> which was one of the references from that paper and try to learn and write TLA+ for something(s).</p><blockquote><p>Formal methods deal with models of systems, not the systems themselves, so the adage applies;</p><p>“All models are wrong, some are useful.”</p></blockquote><p>~ ~ ~</p><p>oh, and TLA is an acronym for <a href="https://en.wikipedia.org/wiki/Temporal_logic_of_actions">Temporal logic of actions</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It has been a while since I posted paper notes or anything at all in this blog. Luckily, I got curious last night about “How are distribu
      
    
    </summary>
    
    
      <category term="research papers" scheme="https://vishnubharathi.codes/tags/research-papers/"/>
    
  </entry>
  
  <entry>
    <title>Double Bongos</title>
    <link href="https://vishnubharathi.codes/blog/double-bongos/"/>
    <id>https://vishnubharathi.codes/blog/double-bongos/</id>
    <published>2023-06-10T22:14:42.000Z</published>
    <updated>2024-03-11T01:24:42.091Z</updated>
    
    <content type="html"><![CDATA[<p>I was re-watching this amazing musical stand-up comedy show called <a href="https://www.imdb.com/title/tt10915930/">“Alex in Wonderland”</a> in Amazon Primevideo tonight. It is one of a kind show. I have never seen or felt anything like this. It is a beautiful walk through the history of Tamil music industry from 1940s to up until now. The host “Alexander Babu” is definintely super-talented. Thanks to him: He taught me a different way to listen and taste music and helped me rediscover my passion in listening to music. He will fill your eyes with tears one second and make you laugh the next second. The transition happens so fast - I can’t believe how he does it.</p><p>I want to share a particular section which WOWed me. If you know Tamil and have an Amazon Primevideo account, search for “Alex in Wonderland” and go to the 58th minute of the show. For the rest of you people, I have typed in the bits that I wanted to share with you:</p><p>Alex says:</p><blockquote><p>Think about this simple instrument</p><p>You know the name of this instrument?</p><p>It is called the Double Bongos right?</p><p>One of the simplest percussion rhythm instruments.</p><p>And you can buy this for 700 ruppees in Chennai even today.</p><p>And will you belive if I say this simple instrument ruled Tamil Film Music for half a century man?</p><p>I am not exaggerating.</p><p>For 50 years every other super hit song that came in Tamil film music had only this instrument as the core rhythm instrument.</p><p>This sound I’m sure you can all recall…….</p><p>(plays the double bongos)</p><p>This sound ruled Tamil film music for half a century.</p><p>This music director we all adore. He will live forever. He’s living forever.</p><p>He made amazing, wonderful, soulful songs.</p><p>The melodies will be out of the world.</p><p>But the percussion: just bongos and nothing else.</p><p>Of-course I am talking about the King of Melodies “M S Viswanathan” (fondly called MSV)</p><p>I think MSV wants to tell us one thing very clearly.</p><p>Beauty lies in simplicity.</p><p>Even on Bongos he wouldn’t complicate.</p><p>He would not go into the complex rhythm patterns and all.</p><p>Just the 4-beat rhythm for every song ya.</p><p>This four beat: one, two, three, four, that’s all.</p><p>Whatever maybe the situation. Whatever maybe the emotion that he has to show. Anything that ever happens in any story, for anybody’s life, MSV has captured anything and everything in this 4-beat rhythm.</p><p>one two three four.</p></blockquote><p>(Alex sings some of the super-hit MSV songs by live-playing the four beats on double bongos)</p><p>Just WOW. These songs have been heard millions of times by a lot of people. I myself had heard them but never noticed this basic construct. That’s why I thanked Alex at the start of this post. We could not taste the essense of music without people like him.</p><p>If you are curious, here is a small playlist of MSV’s songs that Alex performs to demonstrate the double bongos.</p><iframe style="border-radius:12px" src="https://open.spotify.com/embed/playlist/6QoFkkY3JyeslWhlHE4BVG?utm_source=generator" width="100%" height="352" frameBorder="0" allowfullscreen="" allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy"></iframe><p>Notice how thoughtfully the bongos hit in at the start of each song. They continue in harmony throughout every song.</p><p>This got me thinking and inspired. I think the lessons for me (and any of us reading this) are</p><h3 id="Beauty-lies-in-simplicity"><a href="#Beauty-lies-in-simplicity" class="headerlink" title="Beauty lies in simplicity"></a>Beauty lies in simplicity</h3><p>We are talking about a legend here. At the core of his compositions lies this touch of simplicity. How beautiful! A little simplicity has a lot of mileage (50 years). MSV retired and didn’t compose songs for movies for over 20 years in his retirement. But as Alex bets, if he had composed during that time, the magic would have still worked!</p><p>I am already a fan of “Simplicity” - the reason I prefer using Go programming language a lot :D Simplcity is not easy, but trying to get there is well worth it. (Obligatory link to the famous tech talk on this subject <a href="https://www.infoq.com/presentations/Simple-Made-Easy/">here</a>).</p><h3 id="You-don’t-need-costly-gadgets"><a href="#You-don’t-need-costly-gadgets" class="headerlink" title="You don’t need costly gadgets"></a>You don’t need costly gadgets</h3><p>I searched Amazon for the double bongos and it still costs 700 Indian Ruppees. That is equal to 8.49 USD.</p><p>Crazy, right? MSV was able to produce legendary music with it.</p><p>I always advice myself and people to not worry about not having enough money to afford something to make progress in an area.</p><p>Learning programming? You don’t need that latest expensive MacBook Pro or whatever. All you need is a <a href="https://www.raspberrypi.org">Raspberry Pi</a> running linux.</p><p>~ ~ ~ ~</p><p>oh, and don’t forget the four beats of the double bongos.</p><p>one, two, three, four.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I was re-watching this amazing musical stand-up comedy show called &lt;a href=&quot;https://www.imdb.com/title/tt10915930/&quot;&gt;“Alex in Wonderland”&lt;
      
    
    </summary>
    
    
      <category term="music" scheme="https://vishnubharathi.codes/tags/music/"/>
    
      <category term="inspiration" scheme="https://vishnubharathi.codes/tags/inspiration/"/>
    
  </entry>
  
  <entry>
    <title>How not to use context.WithValue in Go</title>
    <link href="https://vishnubharathi.codes/blog/context-with-value-pitfall/"/>
    <id>https://vishnubharathi.codes/blog/context-with-value-pitfall/</id>
    <published>2023-03-05T23:59:45.000Z</published>
    <updated>2024-03-11T01:24:42.087Z</updated>
    
    <content type="html"><![CDATA[<p>While working on my <a href="https://github.com/scriptnull/waymond">recent Go project</a>, I had a use-case where I wanted to pass a struct between two Go packages and I used <code>context.WithValue</code> to do it.</p><p>In retrospect while reading the Go docs for it, I believe I have gone against every possible rule for using it 😅 Sometimes you will have to try things out practically to get a lasting lesson.</p><p>This is such a case and I am going to share the lessons that I learned here.</p><p>All these lessons come from <a href="https://github.com/scriptnull/waymond/commit/f429fe9d0d6d1d7b1b6cdfe819a3f8c3eb7e9503">this single commit</a> - feel free to take a look at it if you are interested.</p><h2 id="my-use-case"><a href="#my-use-case" class="headerlink" title="my use-case"></a>my use-case</h2><p>I have three kinds of packages.</p><ul><li><code>main</code> package - starting point of my app</li><li><code>trigger</code>, <code>connector</code>, <code>scaler</code> packages - these are called from <code>main</code> and accept a context.</li><li><code>event</code> package which is initialized in <code>main</code> and is supposed to be used in the above packages</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// .....</span></span><br><span class="line"></span><br><span class="line">  eventBus, err := event.Init()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;error initializing the event bus&quot;</span>, err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">ctx = context.WithValue(ctx, <span class="string">&quot;eventBus&quot;</span>, eventBus)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// .....</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> id, scaler := <span class="keyword">range</span> scalers &#123;</span><br><span class="line">err := scaler.Register(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">registerErrs = <span class="built_in">append</span>(registerErrs, err)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// .....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Inside the scaler, I would do something like this.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Scaler)</span> <span class="title">Register</span><span class="params">(ctx context.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="comment">// .....</span></span><br><span class="line"></span><br><span class="line">eventBus := ctx.Value(<span class="string">&quot;eventBus&quot;</span>).(event.Bus)</span><br><span class="line">eventBus.Subscribe(fmt.Sprintf(<span class="string">&quot;scaler.%s&quot;</span>, s.id), <span class="function"><span class="keyword">func</span><span class="params">(&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">// .....</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;)</span></span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// .....</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="what’s-wrong-here"><a href="#what’s-wrong-here" class="headerlink" title="what’s wrong here?"></a>what’s wrong here?</h2><p>This line <code>ctx = context.WithValue(ctx, &quot;eventBus&quot;, eventBus)</code> in <code>main.go</code> is what is wrong.</p><p>While trying to refactor, I accidentally removed that line from <code>main.go</code> and ran <code>go build</code>. Guess what? The build succeeded without any problem 😱</p><p>This is scary because the <code>eventBus</code> is at the core of my project. All the packages emit and subscribe to events via it. I would maybe expect a compiler error if something as obvious as not passing it to these packages was happening.</p><p>If we try to run the passing build, it would result in a runtime panic whenever we hit the code path where it was used. Because we are getting the <code>eventBus := ctx.Value(&quot;eventBus&quot;).(event.Bus)</code> at runtime and we missed setting that value via <code>context.WithValue</code>, we will get back a nil reference. Since that value is being used just after that <code>eventBus.Subscribe()</code>, it will lead to a runtime panic.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">panic: interface conversion: interface &#123;&#125; is nil, not event.Bus</span><br></pre></td></tr></table></figure><h2 id="Let-us-visit-the-docs"><a href="#Let-us-visit-the-docs" class="headerlink" title="Let us visit the docs"></a>Let us visit the docs</h2><p>It is time to visit <a href="https://pkg.go.dev/context#WithValue">the Go docs for context.WithValue</a></p><blockquote><p>WithValue returns a copy of parent in which the value associated with key is val.</p></blockquote><p>Yep, I did want value associated with my key.</p><blockquote><p>Use context Values only for request-scoped data that transits processes and APIs, not for passing optional parameters to functions.</p></blockquote><p>LOL, I was not even trying to pass an optional parameter, but a mandatory parameter.</p><blockquote><p>The provided key must be comparable and should not be of type string or any other built-in type to avoid collisions between packages using context.</p></blockquote><p>LOL, I was using string type.</p><blockquote><p>Users of WithValue should define their own types for keys.</p></blockquote><p>I did have this idea in mind and wanted to do it as a refactor.</p><blockquote><p>To avoid allocating when assigning to an interface{}, context keys often have concrete type struct{}. Alternatively, exported context key variables’ static type should be a pointer or interface.</p></blockquote><p>Okay, I still don’t fully understand this part because the example in the Go Doc seems to use the type of <code>string</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> favContextKey <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">k1 := favContextKey(<span class="string">&quot;k1&quot;</span>)</span><br><span class="line">k2 := favContextKey(<span class="string">&quot;k2&quot;</span>)</span><br></pre></td></tr></table></figure><p>I would have expected it to be something like this based on that last line from the docs</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> favContextKey <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">s1 := favContextKey&#123;&#125;</span><br><span class="line">s2 := favContextKey&#123;&#125;</span><br></pre></td></tr></table></figure><p>I am guessing <code>k1</code> and <code>k2</code> will result in memory allocation whereas <code>s1</code> and <code>s2</code> won’t. Could somebody confirm it for me?</p><h2 id="Then-how-to-use-context-WithValue"><a href="#Then-how-to-use-context-WithValue" class="headerlink" title="Then how to use context.WithValue"></a>Then how to use context.WithValue</h2><p>As the docs suggest, it is should be strictly used for carrying request-scoped data that ideally live only during the lifetime of a request.</p><p>Example: let us consider an http handler which gets called every time we make an http request to a client.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line">ctx := context.WithValue(r.Context(), requestID&#123;&#125;, r.Header.Get(<span class="string">&quot;X-Request-ID&quot;</span>))</span><br><span class="line">resp, err := someOtherAPI.client.Request(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So, here the context is very specific to the handler and lives only throughout the lifetime of the handler. It is used to store a piece of information very specific to the request (i.e. the request-id of the request) and pass it to the downstream API requests which could make use of it.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>Two URLs on the internet helped me in my learning here:</p><ul><li>Go docs: <a href="https://pkg.go.dev/context#WithValue">https://pkg.go.dev/context#WithValue</a></li><li>This blog post from Dave Cheney: <a href="https://dave.cheney.net/2017/01/26/context-is-for-cancelation">https://dave.cheney.net/2017/01/26/context-is-for-cancelation</a> </li></ul><p>~ ~ ~ ~</p><p>I dedicate this to all people who are faced with the question of “should I pass down my logger in my go context?” in their busy lives. The answer is simple. Don’t do it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;While working on my &lt;a href=&quot;https://github.com/scriptnull/waymond&quot;&gt;recent Go project&lt;/a&gt;, I had a use-case where I wanted to pass a stru
      
    
    </summary>
    
    
      <category term="go" scheme="https://vishnubharathi.codes/tags/go/"/>
    
  </entry>
  
</feed>
