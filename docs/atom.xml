<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vishnu Bharathi</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vishnubharathi.codes/"/>
  <updated>2024-01-05T14:56:26.561Z</updated>
  <id>https://vishnubharathi.codes/</id>
  
  <author>
    <name>Vishnu Bharathi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Paper notes: Use of Formal Methods at Amazon Web Services</title>
    <link href="https://vishnubharathi.codes/blog/paper-notes-use-of-formal-methods-at-amazon-web-services/"/>
    <id>https://vishnubharathi.codes/blog/paper-notes-use-of-formal-methods-at-amazon-web-services/</id>
    <published>2023-11-08T22:26:53.000Z</published>
    <updated>2024-01-05T14:56:26.561Z</updated>
    
    <content type="html"><![CDATA[<p>It has been a while since I posted paper notes or anything at all in this blog. Luckily, I got curious last night about “How are distributed systems tested?”. My curiosity was evoked by these factors:</p><ul><li>I keep on hearing about “Deterministic Simulation Testing” used in the <a href="https://github.com/tigerbeetle/tigerbeetle">TigerBeetle</a> project. I wonder what it is and what are the other methods to test distributed systems.</li><li>I have been wanting to add “High Availability” modes in <a href="https://github.com/scriptnull/waymond">my little side project</a> and I wanted to understand how to test the high availability of the system before declaring it to be highly available :D</li><li>Maybe there are some lessons that I can take away for designing and implementing different testing strategies at <a href="https://hasura.io/">my current work</a>.</li></ul><p>With those very good enough reasons, I stumbled upon <a href="https://github.com/asatarin/testing-distributed-systems">this awesome github repo</a> which curates various testing strategies for distributed systems. One of the things that stood out for me in that list was “Formal methods”, more specifically “TLA+”. It then led me to watch <a href="https://youtu.be/sPSPEgz3o9U?si=oyvODVhHCr5l7ZnQ">this awesome conference video</a> where they compare TLA+ and <a href="https://jepsen.io/">Jepsen</a>/<a href="https://github.com/jepsen-io/maelstrom">Maelstrom</a> - the video made me feel excited about both the technologies. A quick lesson from the video: TLA+ is apples and Jepsen is oranges - we would ideally want to eat both.</p><p>I then decided to learn more about TLA+ since that comes in the earlier stages of the design process. I have previously attempted to learn TLA+ but couldn’t succeed in it successfully - mainly due to a lack of motivation in the middle of the learning process. So, I wanted to be motivated enough this time before attempting to learn it again and try to use it in my side project or at work. This line of thinking made me remember that AWS had published a paper about TLA+ that I had heard of in the past. So I decided to pick it up and read it.</p><p>You can get a copy of it from <a href="https://www.amazon.science/publications/how-amazon-web-services-uses-formal-methods">here</a>.</p><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>This paper is an experience report from the Engineers who spearheaded the moment of using formal methods to verify complex distributed systems that were getting built at AWS such as S3, Dynamodb, etc. At first, they didn’t think of formal methods and were investing in other types of testing. Those tests helped but there were still edge cases that could cause serious bugs.</p><p>They open up with the scale that they are dealing with here.</p><blockquote><p>As an example of this growth; in 2006 we launched S3, our Simple Storage Service. In the 6 years after launch, S3 grew to store 1 trillion objects [1]. Less than a year later it had grown to 2 trillion objects, and was regularly handling 1.1 million requests per second [2].</p></blockquote><p>Imagine that you were about to design a system for such a high scale and growth - how will you gain confidence about its design and correctness? If you are making any changes to the system at some point, how will you be confident about the effects of your changes?</p><p>The first line of defense in order to gain that confidence is using formal methods to specify and check your system design. Once we made sure that our design is correct, then we start to implement it and write “tests” which check the correctness of the code (this is the classic software testing bit that we are used to).</p><h2 id="Precise-Designs"><a href="#Precise-Designs" class="headerlink" title="Precise Designs"></a>Precise Designs</h2><p>What do most of us do most of the time while designing systems?</p><blockquote><p>… conventional design documents consist of prose, static diagrams, and perhaps pseudo-code in an ad hoc untestable language. Such descriptions are far from precise; they are often ambiguous, or omit critical aspects such as partial failure or the granularity of concurrency (i.e. which constructs are assumed to be atomic).</p></blockquote><p>I have noticed this divergence between the reality and the design doc/diagrams in day-to-day engineering. What if we wrote something during that process of creating those beautiful diagrams and design docs - something that is more detailed and helps us down the line when we are trying to alter the system? That something turned out to be TLA+ for AWS.</p><blockquote><p>TLA+ is based on simple discrete math, i.e. basic set theory and predicates, with which all engineers are familiar. A TLA+ specification describes the set of all possible legal behaviors (execution traces) of a system.</p></blockquote><blockquote><p>TLA+ is intended to make it as easy as possible to show that a system design correctly implements the desired correctness properties, either via conventional mathematical reasoning, or more easily and quickly by using tools such as the TLC model checker [5], a tool which takes a TLA+ specification and exhaustively checks the desired correctness properties across all of the possible execution traces.</p></blockquote><blockquote><p>TLA+ is accompanied by a second language called PlusCal which is closer to a C-style programming language, but much more expressive as it uses TLA+ for expressions and values. In fact, PlusCal is intended to be a direct replacement for pseudo-code.</p></blockquote><h2 id="The-Value-of-Formal-Methods-for-‘Real-world-Systems’"><a href="#The-Value-of-Formal-Methods-for-‘Real-world-Systems’" class="headerlink" title="The Value of Formal Methods for ‘Real-world Systems’"></a>The Value of Formal Methods for ‘Real-world Systems’</h2><blockquote><p>In industry, formal methods have a reputation of requiring a huge amount of training and effort to verify a tiny piece of relatively straightforward code, so the return on investment is only justified in safety-critical domains such as medical systems and avionics. Our experience with TLA+ has shown that perception to be quite wrong.</p></blockquote><p>Excellent, that is exactly what I needed to hear. They also provided this nice table of real world things:</p><p><img src="https://github.com/scriptnull/vishnubharathi.codes/assets/4211715/fc2e094e-f7b9-4e26-b139-c99d5cc7baf8" alt="image"></p><h2 id="Side-Benefit-A-Better-Way-to-Design-Systems"><a href="#Side-Benefit-A-Better-Way-to-Design-Systems" class="headerlink" title="Side Benefit: A Better Way to Design Systems"></a>Side Benefit: A Better Way to Design Systems</h2><blockquote><p>TLA+ has been helping us shift to a better way of designing systems. Engineers naturally focus on designing the ‘happy case’ for a system</p></blockquote><p>and</p><blockquote><p>Once the design for the happy case is done, the engineer then tries to think of “what might go wrong?”, based on personal experience and that of colleagues and reviewers.<br>…. Almost always, the engineer stops well short of handling ‘extremely rare’ combinations of events, as there are too many such scenarios to imagine.</p></blockquote><p>and</p><blockquote><p>In contrast, when using formal specification we begin by precisely stating “what needs to go right?”<br>….</p><ul><li>Safety properties: “what the system is allowed to do”</li><li>Liveness properties: “what the system must eventually do”</li></ul></blockquote><p>After we define those properties, we will need to see if those hold true for various kind of things that can happen in the system.</p><blockquote><p>Next, with the goal of confirming that our design correctly handles all of the dynamic events in the environment, we specify the effects of each of those possible events; e.g. network errors and repairs, disk errors, process crashes and restarts, data center failures and repairs, and actions by human operators.</p></blockquote><p>So there should be a way to model these events in the system too. (The video that I mentioned at the top helped me digest this portion of the paper more easily)</p><blockquote><p>We have found this rigorous “what needs to go right?” approach to be significantly less error prone than the ad hoc “what might go wrong?” approach.</p></blockquote><h2 id="More-Side-Benefits-Improved-Understanding-Productivity-and-Innovation"><a href="#More-Side-Benefits-Improved-Understanding-Productivity-and-Innovation" class="headerlink" title="More Side Benefits: Improved Understanding, Productivity and Innovation"></a>More Side Benefits: Improved Understanding, Productivity and Innovation</h2><blockquote><p>In several cases we have prevented subtle, serious bugs from reaching production. In other cases we have been able to make innovative performance optimizations – e.g. removing or narrowing locks, or weakening constraints on message ordering – which we would not have dared to do without having model checked those changes.</p></blockquote><p>Awesome!</p><h2 id="What-Formal-Specification-Is-Not-Good-For"><a href="#What-Formal-Specification-Is-Not-Good-For" class="headerlink" title="What Formal Specification Is Not Good For"></a>What Formal Specification Is Not Good For</h2><p>They are interested in two things</p><blockquote><p>1) bugs and operator errors that cause a departure from the logical intent of the system, and</p><p>2) surprising ‘sustained emergent performance degradation’ of complex systems that inevitably contain feedback loops.</p></blockquote><p>(1) is achievable via formal methods but not (2). They give a good example of what (2) would look like and they mention that they have other ways to mitigate those.</p><h2 id="First-Steps-To-Formal-Methods"><a href="#First-Steps-To-Formal-Methods" class="headerlink" title="First Steps To Formal Methods"></a>First Steps To Formal Methods</h2><p>This and the upcoming sections of the paper are well narrated and I felt like I was watching a documentary movie while reading these sections.</p><p>One another option that they were considering was <a href="https://en.wikipedia.org/wiki/Alloy_(specification_language">Alloy</a>) as they found evidence of its usage.</p><blockquote><p>Zave used a language called Alloy to find serious bugs in the membership protocol of a distributed system called Chord. Chord was designed by a strong group at MIT and is certainly successful; it won a ’10-year test of time’ award at SIGCOMM 2011</p></blockquote><p>But they chose TLA+ over Alloy as it was not as expressive as they needed it to be.</p><blockquote><p>Eventually C.N. stumbled across a language with those properties when he found a TLA+ specification in the appendix of a paper on a canonical algorithm in our problem domain: the Paxos consensus algorithm</p><p>The fact that TLA+ was created by the designer of such a widely used algorithm gave us some confidence that TLA+ worked for real-world systems.</p></blockquote><p>Yeah, TLA+ was invented by <a href="https://en.wikipedia.org/wiki/Leslie_Lamport">Leslie Lamport</a> who given us with some of the coolest research that are getting used in a lot of stuff.</p><h2 id="First-Big-Success-at-Amazon"><a href="#First-Big-Success-at-Amazon" class="headerlink" title="First Big Success at Amazon"></a>First Big Success at Amazon</h2><blockquote><p>T.R. says that, had he known about TLA+ before starting work on DynamoDB, he would have used it from the start. He believes that the investment he made in writing and checking the formal TLA+ specifications was both more reliable, and also less time consuming than the work he put into writing and checking his informal proofs.</p></blockquote><h2 id="Persuading-More-Engineers-Leads-to-Further-Successes"><a href="#Persuading-More-Engineers-Leads-to-Further-Successes" class="headerlink" title="Persuading More Engineers Leads to Further Successes"></a>Persuading More Engineers Leads to Further Successes</h2><p>Totally love this section. I would use the techniques mentioned here if I were to introduce formal methods and verification to other engineers.</p><blockquote><p>This raised a challenge; how to convey the purpose and benefits of formal methods to an audience of software engineers? Engineers think in terms of debugging rather than ‘verification’, so we called the presentation “Debugging Designs”</p></blockquote><p>and</p><blockquote><p>Continuing that metaphor, we have found that software engineers more readily grasp the concept and practical value of TLA+ if we dub it:</p><p>Exhaustively testable pseudo-code</p></blockquote><p>One another thing that I saw that I didn’t expect was</p><blockquote><p>Most recently we discovered that TLA+ is an excellent tool for data modeling, e.g. designing the schema for a relational or ‘No SQL’ database.</p></blockquote><p>Wow, his helped them in coming up with a better schema!</p><h2 id="The-Most-Frequently-Asked-Question"><a href="#The-Most-Frequently-Asked-Question" class="headerlink" title="The Most Frequently Asked Question"></a>The Most Frequently Asked Question</h2><blockquote><p>“How do we know that the executable code correctly implements the verified design?”</p></blockquote><p>We don’t, but</p><blockquote><p>Formal methods help engineers to get the design right, which is a necessary first step toward getting the code right. If the design is broken then the code is almost certainly broken, as mistakes during coding are extremely unlikely to compensate for mistakes in design. Worse, engineers will probably be deceived into believing that the code is ‘correct’ because it appears to correctly implement the (broken) design. Engineers are unlikely to realize that the design is incorrect while they are focusing on coding.</p></blockquote><h2 id="Alternatives-to-TLA"><a href="#Alternatives-to-TLA" class="headerlink" title="Alternatives to TLA+"></a>Alternatives to TLA+</h2><p>Seems like they published a whole other paper on this topic.</p><blockquote><p>When we found that TLA+ met those requirements, we stopped evaluating methods, as our goal was always practical engineering rather than an exhaustive survey.</p></blockquote><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>I hope you enjoyed this post and got the urge to explore and learn TLA+ - I feel this has the power to change the way we think and reason about our systems. I hope to write up more when I try to use it in real-world situations.</p><p>From here, I would like to read <a href="https://brooker.co.za/blog/2013/01/20/two-phase.html">this</a> which was one of the references from that paper and try to learn and write TLA+ for something(s).</p><blockquote><p>Formal methods deal with models of systems, not the systems themselves, so the adage applies;</p><p>“All models are wrong, some are useful.”</p></blockquote><p>~ ~ ~</p><p>oh, and TLA is an acronym for <a href="https://en.wikipedia.org/wiki/Temporal_logic_of_actions">Temporal logic of actions</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It has been a while since I posted paper notes or anything at all in this blog. Luckily, I got curious last night about “How are distribu
      
    
    </summary>
    
    
      <category term="research papers" scheme="https://vishnubharathi.codes/tags/research-papers/"/>
    
  </entry>
  
  <entry>
    <title>Double Bongos</title>
    <link href="https://vishnubharathi.codes/blog/double-bongos/"/>
    <id>https://vishnubharathi.codes/blog/double-bongos/</id>
    <published>2023-06-10T22:14:42.000Z</published>
    <updated>2024-01-05T14:56:26.553Z</updated>
    
    <content type="html"><![CDATA[<p>I was re-watching this amazing musical stand-up comedy show called <a href="https://www.imdb.com/title/tt10915930/">“Alex in Wonderland”</a> in Amazon Primevideo tonight. It is one of a kind show. I have never seen or felt anything like this. It is a beautiful walk through the history of Tamil music industry from 1940s to up until now. The host “Alexander Babu” is definintely super-talented. Thanks to him: He taught me a different way to listen and taste music and helped me rediscover my passion in listening to music. He will fill your eyes with tears one second and make you laugh the next second. The transition happens so fast - I can’t believe how he does it.</p><p>I want to share a particular section which WOWed me. If you know Tamil and have an Amazon Primevideo account, search for “Alex in Wonderland” and go to the 58th minute of the show. For the rest of you people, I have typed in the bits that I wanted to share with you:</p><p>Alex says:</p><blockquote><p>Think about this simple instrument</p><p>You know the name of this instrument?</p><p>It is called the Double Bongos right?</p><p>One of the simplest percussion rhythm instruments.</p><p>And you can buy this for 700 ruppees in Chennai even today.</p><p>And will you belive if I say this simple instrument ruled Tamil Film Music for half a century man?</p><p>I am not exaggerating.</p><p>For 50 years every other super hit song that came in Tamil film music had only this instrument as the core rhythm instrument.</p><p>This sound I’m sure you can all recall…….</p><p>(plays the double bongos)</p><p>This sound ruled Tamil film music for half a century.</p><p>This music director we all adore. He will live forever. He’s living forever.</p><p>He made amazing, wonderful, soulful songs.</p><p>The melodies will be out of the world.</p><p>But the percussion: just bongos and nothing else.</p><p>Of-course I am talking about the King of Melodies “M S Viswanathan” (fondly called MSV)</p><p>I think MSV wants to tell us one thing very clearly.</p><p>Beauty lies in simplicity.</p><p>Even on Bongos he wouldn’t complicate.</p><p>He would not go into the complex rhythm patterns and all.</p><p>Just the 4-beat rhythm for every song ya.</p><p>This four beat: one, two, three, four, that’s all.</p><p>Whatever maybe the situation. Whatever maybe the emotion that he has to show. Anything that ever happens in any story, for anybody’s life, MSV has captured anything and everything in this 4-beat rhythm.</p><p>one two three four.</p></blockquote><p>(Alex sings some of the super-hit MSV songs by live-playing the four beats on double bongos)</p><p>Just WOW. These songs have been heard millions of times by a lot of people. I myself had heard them but never noticed this basic construct. That’s why I thanked Alex at the start of this post. We could not taste the essense of music without people like him.</p><p>If you are curious, here is a small playlist of MSV’s songs that Alex performs to demonstrate the double bongos.</p><iframe style="border-radius:12px" src="https://open.spotify.com/embed/playlist/6QoFkkY3JyeslWhlHE4BVG?utm_source=generator" width="100%" height="352" frameBorder="0" allowfullscreen="" allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" loading="lazy"></iframe><p>Notice how thoughtfully the bongos hit in at the start of each song. They continue in harmony throughout every song.</p><p>This got me thinking and inspired. I think the lessons for me (and any of us reading this) are</p><h3 id="Beauty-lies-in-simplicity"><a href="#Beauty-lies-in-simplicity" class="headerlink" title="Beauty lies in simplicity"></a>Beauty lies in simplicity</h3><p>We are talking about a legend here. At the core of his compositions lies this touch of simplicity. How beautiful! A little simplicity has a lot of mileage (50 years). MSV retired and didn’t compose songs for movies for over 20 years in his retirement. But as Alex bets, if he had composed during that time, the magic would have still worked!</p><p>I am already a fan of “Simplicity” - the reason I prefer using Go programming language a lot :D Simplcity is not easy, but trying to get there is well worth it. (Obligatory link to the famous tech talk on this subject <a href="https://www.infoq.com/presentations/Simple-Made-Easy/">here</a>).</p><h3 id="You-don’t-need-costly-gadgets"><a href="#You-don’t-need-costly-gadgets" class="headerlink" title="You don’t need costly gadgets"></a>You don’t need costly gadgets</h3><p>I searched Amazon for the double bongos and it still costs 700 Indian Ruppees. That is equal to 8.49 USD.</p><p>Crazy, right? MSV was able to produce legendary music with it.</p><p>I always advice myself and people to not worry about not having enough money to afford something to make progress in an area.</p><p>Learning programming? You don’t need that latest expensive MacBook Pro or whatever. All you need is a <a href="https://www.raspberrypi.org">Raspberry Pi</a> running linux.</p><p>~ ~ ~ ~</p><p>oh, and don’t forget the four beats of the double bongos.</p><p>one, two, three, four.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I was re-watching this amazing musical stand-up comedy show called &lt;a href=&quot;https://www.imdb.com/title/tt10915930/&quot;&gt;“Alex in Wonderland”&lt;
      
    
    </summary>
    
    
      <category term="music" scheme="https://vishnubharathi.codes/tags/music/"/>
    
      <category term="inspiration" scheme="https://vishnubharathi.codes/tags/inspiration/"/>
    
  </entry>
  
  <entry>
    <title>How not to use context.WithValue in Go</title>
    <link href="https://vishnubharathi.codes/blog/context-with-value-pitfall/"/>
    <id>https://vishnubharathi.codes/blog/context-with-value-pitfall/</id>
    <published>2023-03-05T23:59:45.000Z</published>
    <updated>2024-01-05T14:56:26.553Z</updated>
    
    <content type="html"><![CDATA[<p>While working on my <a href="https://github.com/scriptnull/waymond">recent Go project</a>, I had a use-case where I wanted to pass a struct between two Go packages and I used <code>context.WithValue</code> to do it.</p><p>In retrospect while reading the Go docs for it, I believe I have gone against every possible rule for using it 😅 Sometimes you will have to try things out practically to get a lasting lesson.</p><p>This is such a case and I am going to share the lessons that I learned here.</p><p>All these lessons come from <a href="https://github.com/scriptnull/waymond/commit/f429fe9d0d6d1d7b1b6cdfe819a3f8c3eb7e9503">this single commit</a> - feel free to take a look at it if you are interested.</p><h2 id="my-use-case"><a href="#my-use-case" class="headerlink" title="my use-case"></a>my use-case</h2><p>I have three kinds of packages.</p><ul><li><code>main</code> package - starting point of my app</li><li><code>trigger</code>, <code>connector</code>, <code>scaler</code> packages - these are called from <code>main</code> and accept a context.</li><li><code>event</code> package which is initialized in <code>main</code> and is supposed to be used in the above packages</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// .....</span></span><br><span class="line"></span><br><span class="line">  eventBus, err := event.Init()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;error initializing the event bus&quot;</span>, err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">ctx = context.WithValue(ctx, <span class="string">&quot;eventBus&quot;</span>, eventBus)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// .....</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> id, scaler := <span class="keyword">range</span> scalers &#123;</span><br><span class="line">err := scaler.Register(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">registerErrs = <span class="built_in">append</span>(registerErrs, err)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// .....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Inside the scaler, I would do something like this.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Scaler)</span> <span class="title">Register</span><span class="params">(ctx context.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="comment">// .....</span></span><br><span class="line"></span><br><span class="line">eventBus := ctx.Value(<span class="string">&quot;eventBus&quot;</span>).(event.Bus)</span><br><span class="line">eventBus.Subscribe(fmt.Sprintf(<span class="string">&quot;scaler.%s&quot;</span>, s.id), <span class="function"><span class="keyword">func</span><span class="params">(&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">// .....</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;)</span></span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// .....</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="what’s-wrong-here"><a href="#what’s-wrong-here" class="headerlink" title="what’s wrong here?"></a>what’s wrong here?</h2><p>This line <code>ctx = context.WithValue(ctx, &quot;eventBus&quot;, eventBus)</code> in <code>main.go</code> is what is wrong.</p><p>While trying to refactor, I accidentally removed that line from <code>main.go</code> and ran <code>go build</code>. Guess what? The build succeeded without any problem 😱</p><p>This is scary because the <code>eventBus</code> is at the core of my project. All the packages emit and subscribe to events via it. I would maybe expect a compiler error if something as obvious as not passing it to these packages was happening.</p><p>If we try to run the passing build, it would result in a runtime panic whenever we hit the code path where it was used. Because we are getting the <code>eventBus := ctx.Value(&quot;eventBus&quot;).(event.Bus)</code> at runtime and we missed setting that value via <code>context.WithValue</code>, we will get back a nil reference. Since that value is being used just after that <code>eventBus.Subscribe()</code>, it will lead to a runtime panic.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">panic: interface conversion: interface &#123;&#125; is nil, not event.Bus</span><br></pre></td></tr></table></figure><h2 id="Let-us-visit-the-docs"><a href="#Let-us-visit-the-docs" class="headerlink" title="Let us visit the docs"></a>Let us visit the docs</h2><p>It is time to visit <a href="https://pkg.go.dev/context#WithValue">the Go docs for context.WithValue</a></p><blockquote><p>WithValue returns a copy of parent in which the value associated with key is val.</p></blockquote><p>Yep, I did want value associated with my key.</p><blockquote><p>Use context Values only for request-scoped data that transits processes and APIs, not for passing optional parameters to functions.</p></blockquote><p>LOL, I was not even trying to pass an optional parameter, but a mandatory parameter.</p><blockquote><p>The provided key must be comparable and should not be of type string or any other built-in type to avoid collisions between packages using context.</p></blockquote><p>LOL, I was using string type.</p><blockquote><p>Users of WithValue should define their own types for keys.</p></blockquote><p>I did have this idea in mind and wanted to do it as a refactor.</p><blockquote><p>To avoid allocating when assigning to an interface{}, context keys often have concrete type struct{}. Alternatively, exported context key variables’ static type should be a pointer or interface.</p></blockquote><p>Okay, I still don’t fully understand this part because the example in the Go Doc seems to use the type of <code>string</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> favContextKey <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">k1 := favContextKey(<span class="string">&quot;k1&quot;</span>)</span><br><span class="line">k2 := favContextKey(<span class="string">&quot;k2&quot;</span>)</span><br></pre></td></tr></table></figure><p>I would have expected it to be something like this based on that last line from the docs</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> favContextKey <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">s1 := favContextKey&#123;&#125;</span><br><span class="line">s2 := favContextKey&#123;&#125;</span><br></pre></td></tr></table></figure><p>I am guessing <code>k1</code> and <code>k2</code> will result in memory allocation whereas <code>s1</code> and <code>s2</code> won’t. Could somebody confirm it for me?</p><h2 id="Then-how-to-use-context-WithValue"><a href="#Then-how-to-use-context-WithValue" class="headerlink" title="Then how to use context.WithValue"></a>Then how to use context.WithValue</h2><p>As the docs suggest, it is should be strictly used for carrying request-scoped data that ideally live only during the lifetime of a request.</p><p>Example: let us consider an http handler which gets called every time we make an http request to a client.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line">ctx := context.WithValue(r.Context(), requestID&#123;&#125;, r.Header.Get(<span class="string">&quot;X-Request-ID&quot;</span>))</span><br><span class="line">resp, err := someOtherAPI.client.Request(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So, here the context is very specific to the handler and lives only throughout the lifetime of the handler. It is used to store a piece of information very specific to the request (i.e. the request-id of the request) and pass it to the downstream API requests which could make use of it.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>Two URLs on the internet helped me in my learning here:</p><ul><li>Go docs: <a href="https://pkg.go.dev/context#WithValue">https://pkg.go.dev/context#WithValue</a></li><li>This blog post from Dave Cheney: <a href="https://dave.cheney.net/2017/01/26/context-is-for-cancelation">https://dave.cheney.net/2017/01/26/context-is-for-cancelation</a> </li></ul><p>~ ~ ~ ~</p><p>I dedicate this to all people who are faced with the question of “should I pass down my logger in my go context?” in their busy lives. The answer is simple. Don’t do it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;While working on my &lt;a href=&quot;https://github.com/scriptnull/waymond&quot;&gt;recent Go project&lt;/a&gt;, I had a use-case where I wanted to pass a stru
      
    
    </summary>
    
    
      <category term="go" scheme="https://vishnubharathi.codes/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>FOSS Hack 3.0</title>
    <link href="https://vishnubharathi.codes/blog/foss-hack-3-0/"/>
    <id>https://vishnubharathi.codes/blog/foss-hack-3-0/</id>
    <published>2023-03-05T15:54:07.000Z</published>
    <updated>2024-01-05T14:56:26.557Z</updated>
    
    <content type="html"><![CDATA[<p>After a long long time, I managed to attend a hackathon - <a href="https://fossunited.org/fosshack/2023">FOSS Hack 3.0</a></p><h2 id="Confession"><a href="#Confession" class="headerlink" title="Confession"></a>Confession</h2><p>I have a confession to make.</p><p>I have had a secret hackathon burnout all these years. The last time I attended a hackathon might have been in 2016 or 2017.</p><p>But this hackathon is different. I didn’t face any burnout or pressure.</p><p>Instead, I just kept working on what I wanted to work on.</p><p>One of the things that I did differently in this event compared to my previous hackathons is to work on a project that I would use in the real world.</p><p>In my previous hackathons, I used to work on some random app(s) or game(s) which was far out of my reach. This time: I had a well-scoped and practical idea.</p><p>Besides, this hackathon is very special to me - because it is for building Open-source software. How cool is it! (dreamed about something like this to happen in India around 2013-14-ish timeline)</p><h2 id="And-my-new-project-is"><a href="#And-my-new-project-is" class="headerlink" title="And my new project is"></a>And my new project is</h2><p>I worked on a new project called <a href="https://github.com/scriptnull/waymond">waymond</a> which I had been looking to get started on for a long time. I used the hackathon as an excuse to work on it 😀</p><blockquote><p>waymond is</p><ul><li>An open-source autoscaler.</li><li>Aiming to provide autoscaling for a wide variety of infrastructure.</li><li>Modular and extensible.</li><li>Built with Go.</li></ul></blockquote><p>The project’s <a href="https://github.com/scriptnull/waymond#readme">README</a> contains a good deal of information about the project if you are interested. If you find it useful/interesting, consider giving a 🌟 on <a href="https://github.com/scriptnull/waymond">GitHub</a> - helps with my dopamine levels 😅</p><p>I got the chance to learn some Go and explore some libraries while working on the project. I want to share all my learnings here in this blog. At the same time, I would love to keep working and maintaining the project moving forward.</p><h2 id="Progress"><a href="#Progress" class="headerlink" title="Progress"></a>Progress</h2><p>I was able to make <a href="https://github.com/scriptnull/waymond/releases/tag/v0.1.0">v0.1.0 release</a>:</p><ul><li>Helped me arrive at a design for the system</li><li>Helped me in prototyping a very basic use case</li><li>Helped me to write the “core” parts of the software. (of course, I might most probably need to refactor it once I have a better understanding)</li><li>Gave me the chance to write an elaborate README for the project</li></ul><p>I already prepared a thin milestone <a href="https://github.com/scriptnull/waymond/milestone/1">v0.2.0</a> for the project. The aim is to deploy it on real-world workloads (yeah, I do have them and will talk about it in detail once I am there)</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>I also recorded a <a href="https://youtu.be/DuKksePAJ_o">small demo</a> to show my progress so far (also needed to submit it at the end of the hackathon)</p><iframe width="560" height="315" src="https://www.youtube.com/embed/DuKksePAJ_o" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><h2 id="Online-and-solo-this-time"><a href="#Online-and-solo-this-time" class="headerlink" title="Online and solo this time"></a>Online and solo this time</h2><p>It was happening both in-person and online. I attended it online, as I couldn’t travel to Bangalore at the moment.</p><p>Also, I had to do some solo hacking this time. Because the project that I have been working on is in its very early stages and it would have been hard to collaborate with a team. (so, I didn’t want to disturb my friends with lot of unknowns at this point.)</p><p>But I wished the opposite in both cases:</p><ul><li>I wished to attend it online.</li><li>I wished to work on it with a team.</li></ul><p>maybe next time!</p><p>But the good thing is I was able to make some decent progress on the project and it is already at an ok-ish level to accept Open Source contributions for it. So, if you are looking to contribute to an OSS project written in Go, then this is your chance! Take a look at the issue tracker <a href="https://github.com/scriptnull/waymond/issues">here</a>.</p><p>~ ~ ~ ~</p><p>I am still very shy to show my code, but it’s a hackathon project - so I hope you wouldn’t mind my 222 lines long <code>main.go</code> file.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;After a long long time, I managed to attend a hackathon - &lt;a href=&quot;https://fossunited.org/fosshack/2023&quot;&gt;FOSS Hack 3.0&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Co
      
    
    </summary>
    
    
      <category term="life" scheme="https://vishnubharathi.codes/tags/life/"/>
    
      <category term=" hackathon" scheme="https://vishnubharathi.codes/tags/hackathon/"/>
    
  </entry>
  
  <entry>
    <title>A small win</title>
    <link href="https://vishnubharathi.codes/blog/a-small-win/"/>
    <id>https://vishnubharathi.codes/blog/a-small-win/</id>
    <published>2023-03-03T01:22:05.000Z</published>
    <updated>2024-01-05T14:56:26.553Z</updated>
    
    <content type="html"><![CDATA[<p>What a beautiful morning! I am writing this blog post to tell about a small win (or rather small wins) that I had recently.</p><p>I read two self-help books last year:</p><ol><li><a href="https://www.goodreads.com/book/show/40121378-atomic-habits">Atomic Habits</a></li><li><a href="https://www.goodreads.com/book/show/25744928-deep-work">Deep work</a></li></ol><p>(I feel like that is pretty much the reading that I did last year 😅)</p><p>But the good thing is they got me more conscious about “habits” and “focus” - the two gateway drugs for me 😆</p><p>At the start of 2023, I finished reading one more self-help book: <a href="https://www.goodreads.com/book/show/17166225-the-miracle-morning">The morning miracle</a> randomly as it was lying around in our house. There was some marketing fluff inside it, but I was focused on the core concepts. I have been putting the techniques that I learned from it into a good amount of practice.</p><p>I didn’t have a mental model for “habits” when I started. Now after these books, I am kind of understanding it, I think 😊</p><p>So, with that, I am gonna share some of the small wins that I had recently.</p><h2 id="win-1-I-can-meditate-after-all"><a href="#win-1-I-can-meditate-after-all" class="headerlink" title="win #1 - I can meditate after all"></a>win #1 - I can meditate after all</h2><p>First, I continuously meditated for 11 days using an app called <a href="https://play.google.com/store/apps/details?id=com.subconscious.thrive&amp;hl=en_IN&amp;gl=US">Atom</a> - for 10 to 15 minutes a day.</p><p>The app grows a forest based on the points that you accrue after a meditation session.</p><p><img src="https://user-images.githubusercontent.com/4211715/222609659-99f2f4be-4c54-4168-bce1-806ff1877424.png" alt="image"></p><p>And then I missed it for 3 continuous days because of a family function. But had the intention to get back on track. (P.S. Thanks to “Atomic Habits” for teaching me the technique to get back on track when we are going out of sync. I think it said 2 days is the max threshold for missing out on a regular habit. Beyond that point, you might as well not continue the habit. So if we are missing a habit for 2 continuous days, that is when our internal alarm has to go off and think about why we missed it)</p><p>So, the forest looks like this now (on Day 19)</p><p><img src="https://user-images.githubusercontent.com/4211715/222611224-00093342-bf7e-4dce-8f9b-0609a6ea8db6.png" alt="image"></p><h2 id="win-2-I-can-journal-too"><a href="#win-2-I-can-journal-too" class="headerlink" title="win #2 - I can journal too"></a>win #2 - I can journal too</h2><p>I started writing a journal for less than 10 minutes every day. First I started to do it with <a href="https://logseq.com/">logseq</a>, but it was forcing me to switch on my computer early in the morning. So, I switched to a paper journal that I got as a gift.</p><p>My journal format is simple. one “Accomplishment” and one “Disappointment” that I had the previous day. That’s all I write.</p><p>Once a journal page is filled. I retrospect a bit and see if I need to embed new behaviors to help avoid the disappointments that I had.</p><p>(Thanks to the “morning miracle” book in this case, as it motivated me to try the habit of journalling)</p><h2 id="my-learnings"><a href="#my-learnings" class="headerlink" title="my learnings"></a>my learnings</h2><p>I have never done something like this before, yet having a good run now. The secret sauce that I learned is</p><p>“Start small” - like very very small. If it takes more than 2 minutes on day one, then you are over-doing it (again lessons from the books above)</p><p>~ ~ ~ ~</p><p>Bye, have a good day!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;What a beautiful morning! I am writing this blog post to tell about a small win (or rather small wins) that I had recently.&lt;/p&gt;
&lt;p&gt;I read
      
    
    </summary>
    
    
      <category term="life" scheme="https://vishnubharathi.codes/tags/life/"/>
    
  </entry>
  
</feed>
