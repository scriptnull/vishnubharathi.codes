<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vishnu Bharathi</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vishnubharathi.codes/"/>
  <updated>2025-07-13T08:39:43.031Z</updated>
  <id>https://vishnubharathi.codes/</id>
  
  <author>
    <name>Vishnu Bharathi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>First User Framework</title>
    <link href="https://vishnubharathi.codes/blog/first-user-framework/"/>
    <id>https://vishnubharathi.codes/blog/first-user-framework/</id>
    <published>2025-06-04T15:07:03.000Z</published>
    <updated>2025-07-13T08:39:43.031Z</updated>
    
    <content type="html"><![CDATA[<p>I might have accidentally discovered a framework that tries to address work-life balance and side project burnout. For some engineers and builders, this might sound like “common sense”, but it took me a bit of time (a decade - lol) to arrive at this wisdom.</p><p>Here’s the thing: When you have an idea for a project (that light-bulb moment) or when a friend calls you up and says, “Hey, why don’t we build this side project?” your builder instinct kicks in and replies, “Let’s do it!”</p><p>That moment right there is causing a drift in your timeline. I want you to be conscious of that. The thing is, there are only 24 hours in a day, and by signing up to build this new project, you will devote a significant chunk of those hours to it. This might prevent you from doing other activities that are essential for your “work-life balance”.</p><p>How do you find time then? Well, you don’t need to find time for projects. Instead, try finding the right projects for your time.</p><h2 id="Who-is-this-for"><a href="#Who-is-this-for" class="headerlink" title="Who is this for?"></a>Who is this for?</h2><p>Before I continue, I would like to state that this piece of advice is contextual and doesn’t apply to everyone. This advice best applies to you if </p><ul><li>You have a full-time job.</li><li>You are living with your family (and looking to spend your precious evenings with them)</li><li>You are having trouble prioritizing “what to work on”, “what to study”, etc.</li><li>You are having trouble scheduling time.</li><li>You are having constant thoughts of building new projects.</li><li>You sometimes regret spending like 10 hours a week on a project that didn’t go anywhere.</li><li>(I guess you get it)</li></ul><h2 id="The-Framework"><a href="#The-Framework" class="headerlink" title="The Framework"></a>The Framework</h2><p>The truth is, you are building one of these:</p><ul><li>a project with no users</li><li>a project where you are the user</li><li>a project where you have a user (who is not you)</li></ul><p>When you start building a new project, it should fall under one of the above categories. It will eventually lead to one of the following outcomes:</p><ul><li>Best case: Your project is thriving and being used (hopefully by a good number of audience)</li><li>Average case: You hack on your project for a while and eventually forget about it.</li><li>Worst case: You question yourself, “What am I doing with my life?” after weeks/months (hopefully not “years”) of working on the project.</li></ul><p>Just like how most startups go nowhere, I am guessing that most of the side projects don’t hit the best-case outcome. They usually end up in worst or average-case outcomes. From my personal experience, I think I have been part of projects that fall under all (if not most) of the categories and outcomes defined above. Based on that, I have come to the following deduction:</p><table><thead><tr><th>Category</th><th>What you should do</th></tr></thead><tbody><tr><td>No users</td><td>Run away.</td></tr><tr><td>You are the user</td><td>Don’t build it.</td></tr><tr><td>You have a first user</td><td>Build it.</td></tr></tbody></table><blockquote><p><strong>First User Framework</strong>: Start a project only after you have the first user, who is ready to try it out and provide feedback from day 1.</p></blockquote><p> If a category 1 and 2 (no users and you are the user) project seems attractive to you, then challenge yourself to put yourself out there and turn it into category 3 (you have a first user) and then work on it. Instead of taking four months to build a project that no one uses, you will find yourself making meaningful progress in a week if you are able to qualify the project to be category 3 upfront. (we are looking at exponential time gains here; that should be more attractive to you)</p><p>On the other hand, this makes you ruthless about your time and priorities. You might already be working on a short-term goal that is important for you. At times like that, this framework will shine. Either your short-term goal is more important and you pass on the opportunity or this new “category 3” project becomes your short-term goal.</p><h2 id="But-my-passion-project"><a href="#But-my-passion-project" class="headerlink" title="But my passion project?"></a>But my passion project?</h2><p>Usually, passion projects fall under category 1 or 2. So this blog post makes me a villain in the eyes of passion projects. As I mentioned above, this framework is contextual and is written for people who are not finding time and balance in life. If you have the time and freedom to work on a passion project, you should probably do it! There is an immense sense of satisfaction that comes with it.</p><p>For example, I did a category 2 (passion) project: <a href="https://github.com/scriptnull/sblog">a small binary to kick-start my blog writing process</a>. I have been a solo user of it for the past 5 years. I have zero regrets about the time I put into it. So my point is not “don’t work on passion projects”. My point is “Be mindful of your time”.</p><p>~ ~ ~ ~</p><p>“But my friends are calling me to build the next Google?”</p><p>Well, attend the call and ask them, “Where is our first user?”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I might have accidentally discovered a framework that tries to address work-life balance and side project burnout. For some engineers and
      
    
    </summary>
    
    
      <category term="career advice" scheme="https://vishnubharathi.codes/tags/career-advice/"/>
    
  </entry>
  
  <entry>
    <title>Nil channels in Go</title>
    <link href="https://vishnubharathi.codes/blog/nil-channels-in-go/"/>
    <id>https://vishnubharathi.codes/blog/nil-channels-in-go/</id>
    <published>2025-02-17T20:32:12.000Z</published>
    <updated>2025-07-13T08:39:43.035Z</updated>
    
    <content type="html"><![CDATA[<p>A friend from work messaged me today that they had a hard time because they had used <code>var c chan int</code> instead of <code>c := make(chan int)</code> in their Go code.</p><p>I responded by saying that I usually have one rule of thumb i.e. to always use of <code>make()</code> whenever I need a channel or map. That way I can be very sure that I can use those immediately.</p><p>They added that the surprising thing was it didn’t panic the program rather they ended up with an infinite loop that ran silently. I got more intrigued about the situation. So many questions started popping up in my mind. Why was I not able to catch it in the code review? Why was there no linter rule that could catch this? What is the point of having a nil channel in Go if I am brainwashing myself to always use <code>make()</code>?</p><p>I went on to get some answers and here they are!</p><h2 id="Nil-channel"><a href="#Nil-channel" class="headerlink" title="Nil channel"></a>Nil channel</h2><p>It is just a channel assigned to nil value.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c <span class="keyword">chan</span> <span class="keyword">int</span></span><br></pre></td></tr></table></figure><p>Nothing wrong with it!</p><h2 id="Send-to-a-nil-channel"><a href="#Send-to-a-nil-channel" class="headerlink" title="Send to a nil channel"></a>Send to a nil channel</h2><p>When you try to send to a nil channel. </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line">c &lt;- <span class="number">1</span></span><br></pre></td></tr></table></figure><p>You get a deadlock.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fatal error: all goroutines are asleep - deadlock!</span><br><span class="line"></span><br><span class="line">goroutine 1 [chan send (nil chan)]:</span><br><span class="line">main.main()</span><br><span class="line">        &#x2F;home&#x2F;vishnu&#x2F;pers&#x2F;chanbug&#x2F;main.go:5 +0x1c</span><br><span class="line">exit status 2</span><br></pre></td></tr></table></figure><h2 id="Receive-from-a-nil-channel"><a href="#Receive-from-a-nil-channel" class="headerlink" title="Receive from a nil channel"></a>Receive from a nil channel</h2><p>When you try to receive a value from a nil channel</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> c <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line">&lt;-c</span><br></pre></td></tr></table></figure><p>You again get a deadlock.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fatal error: all goroutines are asleep - deadlock!</span><br><span class="line"></span><br><span class="line">goroutine 1 [chan receive (nil chan)]:</span><br><span class="line">main.main()</span><br><span class="line">        &#x2F;home&#x2F;vishnu&#x2F;pers&#x2F;chanbug&#x2F;main.go:5 +0x17</span><br><span class="line">exit status 2</span><br></pre></td></tr></table></figure><h2 id="Send-and-Receive"><a href="#Send-and-Receive" class="headerlink" title="Send and Receive"></a>Send and Receive</h2><p>Now let us try doing both from a nil channel.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(c)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">c &lt;- i</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> c &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;all done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This ended up with deadlock too.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fatal error: all goroutines are asleep - deadlock!</span><br><span class="line"></span><br><span class="line">goroutine 1 [chan receive (nil chan)]:</span><br><span class="line">main.main()</span><br><span class="line">        &#x2F;home&#x2F;vishnu&#x2F;pers&#x2F;chanbug&#x2F;main.go:15 +0x91</span><br><span class="line"></span><br><span class="line">goroutine 18 [chan send (nil chan)]:</span><br><span class="line">main.main.func1()</span><br><span class="line">        &#x2F;home&#x2F;vishnu&#x2F;pers&#x2F;chanbug&#x2F;main.go:11 +0x65</span><br><span class="line">created by main.main in goroutine 1</span><br><span class="line">        &#x2F;home&#x2F;vishnu&#x2F;pers&#x2F;chanbug&#x2F;main.go:8 +0x35</span><br><span class="line">exit status 2</span><br></pre></td></tr></table></figure><p>But my friend mentioned they ran into an infinite loop and not a deadlock. How so?</p><h2 id="The-for-select-construct"><a href="#The-for-select-construct" class="headerlink" title="The for select construct"></a>The <code>for select</code> construct</h2><p>My immediate suspicion was a <code>for select</code> construct instead of <code>for range</code> construct in the above program.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> c <span class="keyword">chan</span> <span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(c)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">c &lt;- i</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> i := &lt;-c:</span><br><span class="line">fmt.Println(i)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;all done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now that leads to an infinite loop without printing anything! Because <code>select</code> seems to not execute the <code>case i := &lt;-c</code> block when <code>c</code> is a nil channel. What can it do after all? It can’t really receive anything from an un-initialized nil channel, right? So it ignores the <code>case</code> block and always runs the <code>default</code> block again and again.</p><h2 id="Initialized-channel"><a href="#Initialized-channel" class="headerlink" title="Initialized channel"></a>Initialized channel</h2><p>Now let us initialize the channel by using <code>make(chan int)</code> instead of <code>var c chan int</code> to see how our dear friend <code>select</code> behaves.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(c)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">c &lt;- i</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> i := &lt;-c:</span><br><span class="line">fmt.Println(i)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;all done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It was again an infinite loop, but this time the output was different. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go | head -n 10</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br><span class="line">0</span><br></pre></td></tr></table></figure><p>The zeros took over the output. I had to pipe the output to <code>head</code> to stop the program from running infinitely and at the same time collect some sample output.</p><p>What are these zeros? Where are they coming from?</p><p>Those are arising from the <code>case i := &lt;-c</code> block of the select. When the channel is not nil, our select statement attempts to receive a value. That results in printing <code>1 2 3</code>, the three values that were sent to the channel. When we close a channel, all we get is the zero value. Hence we are getting zeros after that.</p><p>Is there a way to check if a channel is closed? yes, there is.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> i, ok := &lt;-c:</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;all done&quot;</span>)  <span class="comment">// this is still unreachable</span></span><br></pre></td></tr></table></figure><p>We avoided printing zeros, but it is still leading to an infinite loop. Because the select is alternating between <code>case</code> and <code>default</code> blocks and continuously executes them.</p><p>Let us get rid of <code>default</code>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> i, ok := &lt;-c:</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;all done&quot;</span>)  <span class="comment">// this is still unreachable</span></span><br></pre></td></tr></table></figure><p>That didn’t prevent the infinite loop, our friend <code>select</code> is going on and on choose the <code>case i, ok := &lt;-c</code> block and performing the if condition that evaluates to false always as the channel is closed after sending 3.</p><h2 id="The-lesson"><a href="#The-lesson" class="headerlink" title="The lesson"></a>The lesson</h2><p>How do we avoid the infinite loop? Remember how the select statement ignored the <code>case</code> block when my friend accidentally used the nil channel instead of an initialized channel at the start of this post? That is exactly what we need to <strong>disable</strong> the case in the <code>select</code> statement.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> i, ok := &lt;-c:</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">c = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;all done&quot;</span>) <span class="comment">// this is still unreachable</span></span><br></pre></td></tr></table></figure><p>Now we are out of an infinite loop but are hitting a deadlock after the channel is closed.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">fatal error: all goroutines are asleep - deadlock!</span><br><span class="line"></span><br><span class="line">goroutine 1 [chan receive (nil chan)]:</span><br><span class="line">main.main()</span><br><span class="line">        &#x2F;home&#x2F;vishnu&#x2F;pers&#x2F;chanbug&#x2F;main.go:19 +0xa8</span><br><span class="line">exit status 2</span><br></pre></td></tr></table></figure><p>Because after we <strong>disable</strong> the case, the <code>select</code> statement essentially reduces to an empty <code>select</code> clause.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Makes the go routine sleep forever, there is no case statement that it can listen to for receiving a message.</p><p>The core lesson however is</p><blockquote><p>nil channels are useful for disabling <code>case</code> blocks of <code>select</code></p></blockquote><p>I kind of arrived at this lesson in a weird way, but <a href="https://www.youtube.com/watch?v=t9bEg2A4jsw">this just for func episode</a> teaches it in a beautiful way. (Thanks Campoy if you are reading this!)</p><p>This is particularly useful when you are dealing with multiple channels in different cases of a <code>select</code> and if you want to diable the case blocks one by one when those channels are no longer needed. Going to copy-paste the example from that justforfunc episode to capture the idea.</p><p>The problem is to merge values coming from two channels and output them in another channel.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := asChan(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>)</span><br><span class="line">b := asChan(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>)</span><br><span class="line">c := merge(a, b)</span><br><span class="line"><span class="keyword">for</span> v := <span class="keyword">range</span> c &#123;</span><br><span class="line">fmt.Println(v)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now the <code>merge</code> routine could listen on both the channels and disable the case for a channel after it is closed to make sure that we don’t spend any more CPU time on that case.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">merge</span><span class="params">(a, b &lt;-<span class="keyword">chan</span> <span class="keyword">int</span>)</span> &lt;-<span class="title">chan</span> <span class="title">int</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(c)</span><br><span class="line"><span class="keyword">for</span> a != <span class="literal">nil</span> || b != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> v, ok := &lt;-a:</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">a = <span class="literal">nil</span></span><br><span class="line">log.Printf(<span class="string">&quot;a is done&quot;</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">c &lt;- v</span><br><span class="line"><span class="keyword">case</span> v, ok := &lt;-b:</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">b = <span class="literal">nil</span></span><br><span class="line">log.Printf(<span class="string">&quot;b is done&quot;</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">c &lt;- v</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Beautiful, right? </p><p>Now back to our problem.</p><h2 id="The-solution"><a href="#The-solution" class="headerlink" title="The solution"></a>The solution</h2><p>Let me solve the rest of the problem just for closure.</p><p>One way would be to break to an <code>outer</code> label as shown below. That way, </p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(c)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">c &lt;- i</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">outer:</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> i, ok := &lt;-c:</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">c = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">break</span> outer</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;all done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And finally, we get</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">all done</span><br></pre></td></tr></table></figure><p>NOTE: this would work without the <code>c = nil</code> statement also.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">outer:</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> i, ok := &lt;-c:</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span> outer</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;all done&quot;</span>)</span><br></pre></td></tr></table></figure><p>If the above is same as the previous solution, what is the point? We noticed that setting a channel to <code>nil</code> is beneficial when we have multiple cases. In here, I could maybe use that as a check for the <code>for</code>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(c)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">c &lt;- i</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> c != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> i, ok := &lt;-c:</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">c = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;all done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I should probably start brainwasing myself to make sure I set the channel to <code>nil</code> after consuming it completely. That way I can avoid the weird break label syntax and disable select cases to get more throughput.</p><p>Anyhow I know of a simpler solution. So my recommended solution for my friend would be to</p><ul><li>initialize the channel with <code>make()</code></li><li>use a <code>for range</code> construct instead of <code>for select</code> construct.</li></ul><p>That would look like:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(c)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt; <span class="number">4</span>; i++ &#123;</span><br><span class="line">c &lt;- i</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> c &#123;</span><br><span class="line">fmt.Println(i)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;all done&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="A-proverb"><a href="#A-proverb" class="headerlink" title="A proverb"></a>A proverb</h2><p>The example that I gave was a very “trimmed down” version of what my friend was trying to accomplish in a real-world system. He was trying to consume a channel and split the messages into two other channels. The miss was failing to <em>initialize</em> the channels where the split was occurring.</p><p>On the other end, we learned from the justforfunc example that, when we try to merge two channels into one, we could start setting the consumed channel(s) to nil.</p><p>This is provoking me to make up <a href="https://go-proverbs.github.io/">a Go proverb</a> of my own 😅 Please excuse me if it sounds bad! You have come so far. So you can’t escape from it now - lol :D</p><p>~ ~ ~ ~ </p><p>“Init when you split, Nil when you merge.”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;A friend from work messaged me today that they had a hard time because they had used &lt;code&gt;var c chan int&lt;/code&gt; instead of &lt;code&gt;c := ma
      
    
    </summary>
    
    
      <category term="programming" scheme="https://vishnubharathi.codes/tags/programming/"/>
    
      <category term="go" scheme="https://vishnubharathi.codes/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>My note-taking setup</title>
    <link href="https://vishnubharathi.codes/blog/my-note-taking-setup/"/>
    <id>https://vishnubharathi.codes/blog/my-note-taking-setup/</id>
    <published>2025-02-16T02:34:56.000Z</published>
    <updated>2025-07-13T08:39:43.035Z</updated>
    
    <content type="html"><![CDATA[<p>Some days back I shared something about note-taking on <a href="https://bsky.app/profile/vishnubharathi.codes/post/3lhuwdnwmr22i">the butterfly site</a> (don’t click on the hyperlink yet, it contains a spoiler to this post).</p><p>I have been doing this for a little over a month which makes me very underqualified for this post;  nevertheless, I feel like I have acquired a lifelong habit! Also, I am unable to keep quiet because of the pure joy I am finding in the process of it.</p><p>So let’s start!</p><h2 id="Notebook"><a href="#Notebook" class="headerlink" title="Notebook"></a>Notebook</h2><p> I keep a notebook and pen for taking notes.</p><p><img src="/images/afe27c0adef79e1a5e56feedd8df5f5b.jpg" alt=""></p><p>Cute? Check out the backside:</p><p><img src="/images/0cdec70774b185cc25d46d673a0529a2.jpg" alt=""></p><p>You might have noticed where I got it from. Yep, it is Miniso.</p><p>When I decided to start taking notes, I was searching for a particular kind of notebook and stumbled upon this empty one lying around in the house that satisfied the preconditions. So I kind of stole it from my wife. (She bought it in the first place and has been keeping it for future use)</p><p>Miniso is so good at making you buy stuff that you don’t need (ahem, ahem). Excuse me 😅 I don’t want to make you feel guilty for your last purchase from there. So I will rephrase it as they are so good in making you buy things that you will need for the future 😀</p><h2 id="Pen"><a href="#Pen" class="headerlink" title="Pen"></a>Pen</h2><p>We have ADD gel pens floating around everywhere, so it was my natural choice. These are very lightweight and thin (probably the thinnest pens I have ever used).</p><p>There are two variations that we have ADD gel Ceramic and ADD gel designer series. I generally carry the ceramic one.</p><p> IIRC I first used an ADD gel back in 2003. They used to be costly and with a wet ink which takes time to dry off. But these pens that I have now seem are on a different spectrum. They are more like ballpoint pens.</p><h2 id="The-Altman-technique"><a href="#The-Altman-technique" class="headerlink" title="The Altman technique"></a>The Altman technique</h2><p>Before I go on discussing how my setup works, we will take a short detour of what I call the “Altman technique” because my setup is a fork of the note-taking setup used by Sam Altman.</p><p>I learned this from this <a href="https://www.youtube.com/watch?v=apWjoXCxDcg">video</a>. His suggestions for note-taking are:</p><ul><li>You definitely want a spiral notebook.</li><li>You need to be able to tear off pages from the notebook (hence the spiral bind).</li><li>You want the notebook to lie flat when you open it and keep it on a surface. So you need a hardcover.</li><li>You want something that fits in the pocket.</li></ul><p>He likes ripping off pages from the notebook, and reading the notes by keeping the ripped-off pages side-by-side. He crumbles the pages and throws them out once he is done.</p><p>He seems to finish off one notebook within 2 or 3 weeks. That is a notebook of 100 pages. That is like 100 / (3*7) = 4.7 which is close enough to Niklas Luhmann (The creator of <a href="https://en.wikipedia.org/wiki/Zettelkasten">Zettelkasten</a>). Luhmann took 6 notes per day approx [^1]. Tell me the number of notes that you took in the last day/month/year, I will tell you the number of things you learned. To give an idea, Luhmann took 90,000 notes in his lifetime that helped him produce 58 books and hundreds of articles. So if you are running low on the amount of notes that you take per day/month/year, you will certainly need to retrospect your learning process.</p><p>One of the big mindset shifts that I had in Altman’s technique was “you have to tear pages off from your notebook” which is against the conventional note-taking technique that I have tried in school days: “Write something in your notebook and preserve those pages forever like it is history”. That is how you will end up with a pile of notebooks that go unnoticed and thrown away as time progresses.</p><p>What is the point of writing the page if all I am going to do is throw away the page at the end of the day? Well, you need to convert that note into an artifact that could be retrieved when you need it in the future. That usually means transferring the note to Zettelkasten (slip-box). While Altman doesn’t mention if he uses Zettelkasten, I guess his equivalent might be to use the note in a document/project he might be working on.</p><h2 id="How-I-use-them"><a href="#How-I-use-them" class="headerlink" title="How I use them"></a>How I use them</h2><p>I keep it open at that moment when I start reading a book, listening to a podcast, or watching a video.</p><p><img src="/images/666e4c25116c7775f5907d5fca6ecbea.jpg" alt=""></p><p>I pause the watching/reading when I want to take notes. I fill up a page and note its reference (book name, page number, etc.) at the bottom of the page. Most of the time I use both the front and back of the paper for a single note. So I mention the reference on one of those sides.</p><p>I was a bit skeptical if my notebook could be carried around easily in a pocket because of the weird form factor. But I was wrong. It is so good to carry around. But I stopped carrying them around in my pockets but I carry them in my backpack. Because I have found myself to be needing them usually when I sit for learning and not in situations like shopping.</p><p>What if that next big thought/idea strikes me while I am shopping? lol, no worries. because I will just note it down on my mobile. This is where I introduce you to my other notebook: <a href="https://obsidian.md/">Obsidian</a>.</p><p>When I am learning on my computer or mobile, I take my notes in Obsidian. This is the reason why I don’t carry the notebook in my pocket most of the time because I am mostly on my computer where I have Obsidian.</p><p>What do I do with the pages in my notebook? I do the same thing as Altman: tearing them off. Once in a while I sit down and feed my notes into Obsidian and then tear off the pages and throw it off. This is what the transfer looks like in the real world:</p><p><img src="/images/c148bac312b2440824a5638d42a61901.png" alt=""></p><p>I try to keep the lag between the syncing process to be small. I don’t like keeping a lot of notes in my notebook. I want to be ripping of as many pages from my notebook at any point in time as possible. Otherwise, I have to pay the taxes of <a href="https://en.wikipedia.org/wiki/Zeigarnik_effect">Zeigarnik effect</a> (the notes that I haven’t yet torn off and synced to my digital Zettelkasten will take up space which could be used for learning some other thing).</p><p>I also learned that I could use the Zeigarnik effect to my advantage: If I want to delve into the thoughts of a particular project for a certain period of time (say I want to have thoughts about this topic for the next week), I could just leave the notes in my notebook without tearing off and make them haunt me!</p><h2 id="The-Graph"><a href="#The-Graph" class="headerlink" title="The Graph"></a>The Graph</h2><p>Let us go back to where we started: <a href="https://bsky.app/profile/vishnubharathi.codes/post/3lhuwdnwmr22i">the butterfly site post</a> (you can click on it now)</p><p>It is a snapshot of the Obsidian graph. If you haven’t heard of Obsidian before, I don’t want to steal the joy of learning what Obsidian is from you. So I will not talk about it in detail here. I encourage you to <a href="https://obsidian.md/">see for yourself</a>! Besides I might do a post just about it at some point in the future.</p><p>But here is what you need to know. It is a note-taking app. You can implement Zettelkasten with it. You get an awesome graph view - a great dopamine hit every time you watch it. Here is what my graph looks like after 35 days of using it:</p><p><img src="/images/bbe530dcc2929d6b4b4e2aeeb19b4a78.png" alt=""></p><p>Looks pretty, huh?</p><p>[^1]: How to Take Smart Notes: One Simple Technique to Boost Writing, Learning and Thinking, page 91.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Some days back I shared something about note-taking on &lt;a href=&quot;https://bsky.app/profile/vishnubharathi.codes/post/3lhuwdnwmr22i&quot;&gt;the but
      
    
    </summary>
    
    
      <category term="life" scheme="https://vishnubharathi.codes/tags/life/"/>
    
      <category term=" productivity" scheme="https://vishnubharathi.codes/tags/productivity/"/>
    
  </entry>
  
  <entry>
    <title>Why I Blog</title>
    <link href="https://vishnubharathi.codes/blog/why-i-blog/"/>
    <id>https://vishnubharathi.codes/blog/why-i-blog/</id>
    <published>2025-01-12T10:44:48.000Z</published>
    <updated>2025-07-13T08:39:43.038Z</updated>
    
    <content type="html"><![CDATA[<p>It has been almost a decade since I started blogging. I have written a total of 106 blog posts during this time on a variety of <a href="https://vishnubharathi.codes/archives/">topics</a>. I guess I never really shared my motivation behind writing all these posts with anyone. So I will use this blog post as a chance to convey it.</p><h2 id="Paying-it-forward"><a href="#Paying-it-forward" class="headerlink" title="Paying it forward"></a>Paying it forward</h2><p>When I was in college, I was trying to learn node.js. None of my teachers or college friends had heard about it. It was so new. I was trying to build a chat app and came across a YouTube video where Ryan Dahl was giving an introduction to node (probably <a href="https://youtu.be/jo_B4LTHi3I?si=XvOgK4zagvA4pr-G">this video</a>). I read a lot of random blog posts about node.js and built stuff with the help of it. The same thing happened with Angular.js or whatever new technology I was trying to learn in college.</p><p>The best way to learn was by watching conference videos and reading blog posts. I have used this formula to date. Trust me, <a href="https://youtu.be/JC82Il2cjqA?si=dCmJzID8_xUIN578">You can learn anything this way!</a></p><p>I see sharing what I learn or know here as a way of paying it forward. That is the least that I can do in exchange for what I got.</p><h2 id="Like-a-Journal"><a href="#Like-a-Journal" class="headerlink" title="Like a Journal"></a>Like a Journal</h2><p>I used to write blog posts titled “log x = y” which used to be a weekly round-up of some things that I learned during the week. So in a way, I have used this blog as a journal of things that I learned.</p><p>I don’t always look back at my journal, but when I do I find some little things that make me smile. I moved away from this format because I want to get into writing in-depth posts on a particular topic.</p><h2 id="Dopamine-cycle"><a href="#Dopamine-cycle" class="headerlink" title="Dopamine cycle"></a>Dopamine cycle</h2><p>I recently heard of this advice from Andrej Karpathy while watching his keynote <a href="https://www.youtube.com/watch?v=tsTeEkzO9xc&amp;t=245s">here</a>: “keep the dopamine flowing”. </p><blockquote><p>Be aware of your psychology, your brain, how it works, and what it needs to keep going and to keep inspired… Your brain is a reward machine and it wants rewards and you need to give it rewards.</p></blockquote><p>I find it rewarding when I publish a blog post and people find it useful and talk to me about it. I have had people messaging me, emailing me, talking to me at work, and even in interviews (where I am an interviewer) about some blog post that I wrote. It is a great ice-breaker.</p><p>These blog posts are a way for me to keep the dopamine cycle going - I wish I had posted more on this blog to keep the cycle running! </p><h2 id="Always-read-the-comments"><a href="#Always-read-the-comments" class="headerlink" title="Always read the comments"></a>Always read the comments</h2><p>I heard this advice from Sam Altman a long time back: <a href="https://blog.samaltman.com/dont-read-the-comments">Don’t Read The Comments</a>. It was targeted towards people building new projects and startups. I guess the opposite of that advice applies to people who are writing blog posts to share knowledge: “Always read the comments”</p><p>I have had a few instances where my posts ended up on <a href="https://news.ycombinator.com/">the orange site</a> or similar places on the internet. Often times I get to learn more from the comments than the blog post itself by reading through all the comments (<a href="https://news.ycombinator.com/item?id=27410910">an example here</a>). Comments are a great way to get feedback and learn from others.</p><h2 id="Free-and-open"><a href="#Free-and-open" class="headerlink" title="Free and open"></a>Free and open</h2><p>I like to keep this blog free from ads. I have no intention of pay-walling anything that I write here. You are free to <a href="https://creativecommons.org/licenses/by/4.0/">share and adapt</a> anything on this website.</p><p>I had my calling after watching the <a href="https://www.youtube.com/watch?v=9vz06QO3UkQ">Internet’s Own Boy</a> documentary: Knowledge is so important for humanity. Access to information is what will truly empower humans in this information age.</p><p>In my case, the access to those blog posts which were free and open empowered me to learn and grow. It helped me achieve my dream of working in tech. Imagine if all those information were locked behind some paywall.</p><h2 id="Timeless"><a href="#Timeless" class="headerlink" title="Timeless"></a>Timeless</h2><p>I <em>really</em> <em>really</em> want to write blog posts that are timeless. I believe I have written a few such posts in this blog (I will leave it as a reader’s exercise to identify those posts 😅)</p><p>You can find many technical blog posts in this blog but the problem is that tech can become outdated (but I still want to write them because they serve a different purpose).</p><p>My main motivation for continuing to contribute to this blog is to capture and create timeless wisdom. I see it as a kind of wealth.</p><h2 id="Head-fake"><a href="#Head-fake" class="headerlink" title="Head fake"></a>Head fake</h2><p>If you haven’t watched the <a href="https://www.youtube.com/watch?v=ji5_MqicxSo">Randy Pausch Last Lecture: Achieving Your Childhood Dreams</a>, you should stop reading this blog post and finish watching that first!</p><p>I will summarize what happens in that video: Professor Randy Pausch shared a lot of timeless wisdom in that video. He introduced me to the word “head fake” which he references in the talk.</p><blockquote><p>He described as a “head fake”, for example, the phenomenon of parents encouraging their children to play football. Parents tell their children to play sports not because they really want them to become football stars, he said, but to help them develop collaboration and socializing skills</p></blockquote><p>This is going to be a spoiler if you haven’t watched the video yet. Towards the end of the video, he reveals the second head fake of his talk.</p><blockquote><p>Have you figured out the second head fake?</p><p>This talk is not for you. It is for my kids.</p></blockquote><p>This blog is a head fake. It is for my daughter and sisters.</p><p>This is about the next-gen. What can they learn from my mistakes and experiences? That goes in this blog. As simple as that!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It has been almost a decade since I started blogging. I have written a total of 106 blog posts during this time on a variety of &lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="life" scheme="https://vishnubharathi.codes/tags/life/"/>
    
      <category term=" blogging" scheme="https://vishnubharathi.codes/tags/blogging/"/>
    
  </entry>
  
  <entry>
    <title>Baking a React App into a Go server</title>
    <link href="https://vishnubharathi.codes/blog/baking-a-react-app-into-a-go-server/"/>
    <id>https://vishnubharathi.codes/blog/baking-a-react-app-into-a-go-server/</id>
    <published>2024-12-22T17:51:09.000Z</published>
    <updated>2025-07-13T08:39:43.028Z</updated>
    
    <content type="html"><![CDATA[<p>After many long years, I am trying to write a small web UI for a side project. It is going to be a single-page application that I would like to be served from my server written in Go. I was introduced to <a href="https://vite.dev/">vite</a> which gave me a hello world <a href="https://react.dev/">react</a> app that gave me web assets like</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">webapp&#x2F;</span><br><span class="line">├── dist</span><br><span class="line">│   ├── assets</span><br><span class="line">│   │   ├── index-n_ryQ3BS.css</span><br><span class="line">│   │   ├── index-uO412iEj.js</span><br><span class="line">│   │   └── react-CHdo91hT.svg</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   └── vite.svg</span><br><span class="line">├── index.html</span><br></pre></td></tr></table></figure><h2 id="Basic-serve"><a href="#Basic-serve" class="headerlink" title="Basic serve"></a>Basic serve</h2><p>In order to serve that app from my Go server, I would initialize it to be a go package that exposes a web server that serves it. That means creating <code>webapp/webapp.go</code> in our vite project.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> webapp</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">*http.Server</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(addr <span class="keyword">string</span>)</span> *<span class="title">Server</span></span> &#123;</span><br><span class="line">routes := http.NewServeMux()</span><br><span class="line"></span><br><span class="line">routes.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">&quot;TODO&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;Server&#123;</span><br><span class="line">Server: &amp;http.Server&#123;</span><br><span class="line">Addr:    addr,</span><br><span class="line">Handler: routes,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now our react app is also a Go package which could be consumed from other packages like this</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">webServer := webapp.New(webServerAddr)</span><br><span class="line"><span class="keyword">if</span> err := webServer.ListenAndServe(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;Error starting web server&quot;</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Searching-for-a-handler"><a href="#Searching-for-a-handler" class="headerlink" title="Searching for a handler"></a>Searching for a handler</h2><p>We would like to serve whatever is in our  <code>dist</code> folder when someone hits our web server. So I searched if there were any such handlers and found two such functions in the standard library.  So that we could register the handler in our <code>routes</code> ServeMux.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FileServer</span><span class="params">(root FileSystem)</span> <span class="title">Handler</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FileServerFS</span><span class="params">(root fs.FS)</span> <span class="title">Handler</span></span></span><br></pre></td></tr></table></figure><p>The difference between them is their arguments. <code>FileSystem</code> is part of the <code>net/http</code> library and I found this note about it in the comments:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This interface predates the [fs.FS] interface, which can be used instead:</span></span><br><span class="line"><span class="comment">// the [FS] adapter function converts an fs.FS to a FileSystem.</span></span><br><span class="line"><span class="keyword">type</span> FileSystem <span class="keyword">interface</span> &#123;</span><br><span class="line">Open(name <span class="keyword">string</span>) (File, error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So it is a deprecated interface in favor of a new interface. That leaves us with <code>fs.FS</code>.</p><p>It seems like <code>fs.FS</code> is an interface that represents a file system and is present in the <a href="https://pkg.go.dev/io/fs">io/fs package</a>. I remember that they introduced the <code>io</code> package in the standard library to deprecate the <code>ioutil</code> package and this should have been a sweet addition that came with it?</p><p>Anyway, we will choose <code>FileServerFS</code> now.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">routes.Handle(<span class="string">&quot;/&quot;</span>, http.FileServerFS(????))</span><br></pre></td></tr></table></figure><h2 id="A-filesystem"><a href="#A-filesystem" class="headerlink" title="A filesystem"></a>A filesystem</h2><p>So we need a filesystem that we can give to our <code>http.FileServerFS()</code> method. I searched through the possible implementations of <code>fs.FS</code> interface and the first one that I was able to surface is <code>os.DirFS</code>.</p><p>It is a function that gives <code>fs.FS</code> based on the contents of a file system directory.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">routes.Handle(<span class="string">&quot;/&quot;</span>, http.FileServerFS(os.DirFS(<span class="string">&quot;/home/vishnu/pers/gokakashi/webapp/dist&quot;</span>)))</span><br></pre></td></tr></table></figure><p>The problem with this approach is, that we will hit troubles when we ship our server to a machine on the internet. Now, someone has to take care of creating <code>/home/vishnu/pers/gokakashi/webapp/dist</code> on the server machine or point to a directory that contains our web app’s assets. That becomes messy, right?</p><p>What I would ideally want is to embed all my HTML, CSS, JS files inside our go server binary itself. That way we ship only the binary and it will be able to serve the web app.</p><h2 id="Baking"><a href="#Baking" class="headerlink" title="Baking"></a>Baking</h2><p>I have heard of the <code>embed</code> package which could be used for embedding files inside the go binary. There is <code>embed.FS</code> which satisfied <code>fs.FS</code> interface. So we could probably use it to bake in our assets.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:embed dist</span></span><br><span class="line"><span class="keyword">var</span> WebAssets embed.FS</span><br></pre></td></tr></table></figure><p>We make use of it like</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">routes.Handle(<span class="string">&quot;/&quot;</span>, http.FileServerFS(WebAssets))</span><br></pre></td></tr></table></figure><p>This renders:<br><img src="https://github.com/user-attachments/assets/2fa7a78e-eeb1-4aaf-b969-01c38e044777" alt="image"></p><p>(not quite, what we want) Instead of embedding what is inside dist folder, we have embedded the <code>dist</code> folder itself. To inspect what got embedded, we could use the <code>go list</code> command like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go list -f &#39;&#123;&#123;.EmbedFiles&#125;&#125;&#39; .</span><br><span class="line">[dist&#x2F;assets&#x2F;index-n_ryQ3BS.css dist&#x2F;assets&#x2F;index-uO412iEj.js dist&#x2F;assets&#x2F;react-CHdo91hT.svg dist&#x2F;index.html dist&#x2F;vite.svg]</span><br></pre></td></tr></table></figure><p>I tried doing <code>//go:embed dist/*</code> instead of <code>//go:embed dist</code>, that didn’t help as well because (from Go docs)</p><blockquote><p>The difference is that ‘image/*’ embeds ‘image/.tempfile’ while ‘image’ does not. Neither embeds ‘image/dir/.tempfile’.</p></blockquote><p>If I used <code>//go:embed dist/index.html</code>, then the file seems to be still embedded with the <code>dist</code> folder.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go list -f &#39;&#123;&#123;.EmbedFiles&#125;&#125;&#39; .</span><br><span class="line">[dist&#x2F;index.html]</span><br></pre></td></tr></table></figure><p>I was wondering if there is a way to embed the contents of <code>dist</code> at the root of the FS instead of the FS directory. There seems to be no provision in the <code>embed</code> package to do it. Because it operates at a package level, and it would force us to declare <code>dist</code> as a separate go package and would force us to remove <code>dist</code> folder from <code>.gitignore</code>. That would be messy.</p><h2 id="Traverse"><a href="#Traverse" class="headerlink" title="Traverse"></a>Traverse</h2><p>We know that we can’t change the root of the file system, but what if we traverse to a folder and get an <code>fs.FS</code> representation that projects the selected directory as the root? I suspected that there might be method to help with that in the <code>io/fs</code> package.</p><p>yep, look what I discovered:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sub returns an FS corresponding to the subtree rooted at fsys&#x27;s dir.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sub</span><span class="params">(fsys FS, dir <span class="keyword">string</span>)</span> <span class="params">(FS, error)</span></span></span><br></pre></td></tr></table></figure><p>Now, we just make use of it like this</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:embed dist</span></span><br><span class="line"><span class="keyword">var</span> WebAssets embed.FS</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(addr <span class="keyword">string</span>)</span> <span class="params">(*Server, error)</span></span> &#123;</span><br><span class="line">routes := http.NewServeMux()</span><br><span class="line"></span><br><span class="line">reactApp, err := fs.Sub(WebAssets, <span class="string">&quot;dist&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;error finding the dist folder: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">routes.Handle(<span class="string">&quot;/&quot;</span>, http.FileServerFS(reactApp))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;Server&#123;</span><br><span class="line">Server: &amp;http.Server&#123;</span><br><span class="line">Addr:    addr,</span><br><span class="line">Handler: routes,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And boom!</p><p><img src="https://github.com/user-attachments/assets/150ae840-d520-47e8-9e87-ddf01713614f" alt="Screenshot from 2024-12-21 12-48-57"></p><h2 id="Compile-time"><a href="#Compile-time" class="headerlink" title="Compile time"></a>Compile time</h2><p>The <code>//go:embed dist</code> directive is evaluated during compile time. So when you run <code>go build</code>, the compiler looks for a <code>dist</code> folder and bakes it in the binary.</p><p>Let us say we miss generating the <code>dist</code> folder (maybe we failed running <code>npm run build</code>), that would lead to a compile-time error</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go build </span><br><span class="line">webapp&#x2F;webapp.go:14:12: pattern dist: no matching files found</span><br></pre></td></tr></table></figure><p>This way we get the guarantee that no one is able to build our Go app without building the frontend that is intended to be embedded in it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;After many long years, I am trying to write a small web UI for a side project. It is going to be a single-page application that I would l
      
    
    </summary>
    
    
      <category term="programming" scheme="https://vishnubharathi.codes/tags/programming/"/>
    
      <category term="go" scheme="https://vishnubharathi.codes/tags/go/"/>
    
  </entry>
  
</feed>
