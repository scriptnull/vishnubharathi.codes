<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vishnu Bharathi</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vishnubharathi.codes/"/>
  <updated>2025-02-16T02:42:55.077Z</updated>
  <id>https://vishnubharathi.codes/</id>
  
  <author>
    <name>Vishnu Bharathi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>My note-taking setup</title>
    <link href="https://vishnubharathi.codes/blog/my-note-taking-setup/"/>
    <id>https://vishnubharathi.codes/blog/my-note-taking-setup/</id>
    <published>2025-02-16T02:34:56.000Z</published>
    <updated>2025-02-16T02:42:55.077Z</updated>
    
    <content type="html"><![CDATA[<p>Some days back I shared something about note-taking on <a href="https://bsky.app/profile/vishnubharathi.codes/post/3lhuwdnwmr22i">the butterfly site</a> (don‚Äôt click on the hyperlink yet, it contains a spoiler to this post).</p><p>I have been doing this for a little over a month which makes me very underqualified for this post;  nevertheless, I feel like I have acquired a lifelong habit! Also, I am unable to keep quiet because of the pure joy I am finding in the process of it.</p><p>So let‚Äôs start!</p><h2 id="Notebook"><a href="#Notebook" class="headerlink" title="Notebook"></a>Notebook</h2><p> I keep a notebook and pen for taking notes.</p><p><img src="/images/afe27c0adef79e1a5e56feedd8df5f5b.jpg" alt=""></p><p>Cute? Check out the backside:</p><p><img src="/images/0cdec70774b185cc25d46d673a0529a2.jpg" alt=""></p><p>You might have noticed where I got it from. Yep, it is Miniso.</p><p>When I decided to start taking notes, I was searching for a particular kind of notebook and stumbled upon this empty one lying around in the house that satisfied the preconditions. So I kind of stole it from my wife. (She bought it in the first place and has been keeping it for future use)</p><p>Miniso is so good at making you buy stuff that you don‚Äôt need (ahem, ahem). Excuse me üòÖ I don‚Äôt want to make you feel guilty for your last purchase from there. So I will rephrase it as they are so good in making you buy things that you will need for the future üòÄ</p><h2 id="Pen"><a href="#Pen" class="headerlink" title="Pen"></a>Pen</h2><p>We have ADD gel pens floating around everywhere, so it was my natural choice. These are very lightweight and thin (probably the thinnest pens I have ever used).</p><p>There are two variations that we have ADD gel Ceramic and ADD gel designer series. I generally carry the ceramic one.</p><p> IIRC I first used an ADD gel back in 2003. They used to be costly and with a wet ink which takes time to dry off. But these pens that I have now seem are on a different spectrum. They are more like ballpoint pens.</p><h2 id="The-Altman-technique"><a href="#The-Altman-technique" class="headerlink" title="The Altman technique"></a>The Altman technique</h2><p>Before I go on discussing how my setup works, we will take a short detour of what I call the ‚ÄúAltman technique‚Äù because my setup is a fork of the note-taking setup used by Sam Altman.</p><p>I learned this from this <a href="https://www.youtube.com/watch?v=apWjoXCxDcg">video</a>. His suggestions for note-taking are:</p><ul><li>You definitely want a spiral notebook.</li><li>You need to be able to tear off pages from the notebook (hence the spiral bind).</li><li>You want the notebook to lie flat when you open it and keep it on a surface. So you need a hardcover.</li><li>You want something that fits in the pocket.</li></ul><p>He likes ripping off pages from the notebook, and reading the notes by keeping the ripped-off pages side-by-side. He crumbles the pages and throws them out once he is done.</p><p>He seems to finish off one notebook within 2 or 3 weeks. That is a notebook of 100 pages. That is like $100 / (3*7) = 4.7$ which is close enough to Niklas Luhmann (The creator of <a href="https://en.wikipedia.org/wiki/Zettelkasten">Zettelkasten</a>). Luhmann took 6 notes per day approx [^1]. Tell me the number of notes that you took in the last day/month/year, I will tell you the number of things you learned. To give an idea, Luhmann took 90,000 notes in his lifetime that helped him produce 58 books and hundreds of articles. So if you are running low on the amount of notes that you take per day/month/year, you will certainly need to retrospect your learning process.</p><p>One of the big mindset shifts that I had in Altman‚Äôs technique was ‚Äúyou have to tear pages off from your notebook‚Äù which is against the conventional note-taking technique that I have tried in school days: ‚ÄúWrite something in your notebook and preserve those pages forever like it is history‚Äù. That is how you will end up with a pile of notebooks that go unnoticed and thrown away as time progresses.</p><p>What is the point of writing the page if all I am going to do is throw away the page at the end of the day? Well, you need to convert that note into an artifact that could be retrieved when you need it in the future. That usually means transferring the note to Zettelkasten (slip-box). While Altman doesn‚Äôt mention if he uses Zettelkasten, I guess his equivalent might be to use the note in a document/project he might be working on.</p><h2 id="How-I-use-them"><a href="#How-I-use-them" class="headerlink" title="How I use them"></a>How I use them</h2><p>I keep it open at that moment when I start reading a book, listening to a podcast, or watching a video.</p><p><img src="/images/666e4c25116c7775f5907d5fca6ecbea.jpg" alt=""></p><p>I pause the watching/reading when I want to take notes. I fill up a page and note its reference (book name, page number, etc.) at the bottom of the page. Most of the time I use both the front and back of the paper for a single note. So I mention the reference on one of those sides.</p><p>I was a bit skeptical if my notebook could be carried around easily in a pocket because of the weird form factor. But I was wrong. It is so good to carry around. But I stopped carrying them around in my pockets but I carry them in my backpack. Because I have found myself to be needing them usually when I sit for learning and not in situations like shopping.</p><p>What if that next big thought/idea strikes me while I am shopping? lol, no worries. because I will just note it down on my mobile. This is where I introduce you to my other notebook: <a href="https://obsidian.md/">Obsidian</a>.</p><p>When I am learning on my computer or mobile, I take my notes in Obsidian. This is the reason why I don‚Äôt carry the notebook in my pocket most of the time because I am mostly on my computer where I have Obsidian.</p><p>What do I do with the pages in my notebook? I do the same thing as Altman: tearing them off. Once in a while I sit down and feed my notes into Obsidian and then tear off the pages and throw it off. This is what the transfer looks like in the real world:</p><p><img src="/images/c148bac312b2440824a5638d42a61901.png" alt=""></p><p>I try to keep the lag between the syncing process to be small. I don‚Äôt like keeping a lot of notes in my notebook. I want to be ripping of as many pages from my notebook at any point in time as possible. Otherwise, I have to pay the taxes of <a href="https://en.wikipedia.org/wiki/Zeigarnik_effect">Zeigarnik effect</a> (the notes that I haven‚Äôt yet torn off and synced to my digital Zettelkasten will take up space which could be used for learning some other thing).</p><p>I also learned that I could use the Zeigarnik effect to my advantage: If I want to delve into the thoughts of a particular project for a certain period of time (say I want to have thoughts about this topic for the next week), I could just leave the notes in my notebook without tearing off and make them haunt me!</p><h2 id="The-Graph"><a href="#The-Graph" class="headerlink" title="The Graph"></a>The Graph</h2><p>Let us go back to where we started: <a href="https://bsky.app/profile/vishnubharathi.codes/post/3lhuwdnwmr22i">the butterfly site post</a> (you can click on it now)</p><p>It is a snapshot of the Obsidian graph. If you haven‚Äôt heard of Obsidian before, I don‚Äôt want to steal the joy of learning what Obsidian is from you. So I will not talk about it in detail here. I encourage you to <a href="https://obsidian.md/">see for yourself</a>! Besides I might do a post just about it at some point in the future.</p><p>But here is what you need to know. It is a note-taking app. You can implement Zettelkasten with it. You get an awesome graph view - a great dopamine hit every time you watch it. Here is what my graph looks like after 45 days of using it:</p><p><img src="/images/bbe530dcc2929d6b4b4e2aeeb19b4a78.png" alt=""></p><p>Looks pretty, huh?</p><p>[^1]: How to Take Smart Notes: One Simple Technique to Boost Writing, Learning and Thinking, page 91.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Some days back I shared something about note-taking on &lt;a href=&quot;https://bsky.app/profile/vishnubharathi.codes/post/3lhuwdnwmr22i&quot;&gt;the but
      
    
    </summary>
    
    
      <category term="life" scheme="https://vishnubharathi.codes/tags/life/"/>
    
      <category term=" productivity" scheme="https://vishnubharathi.codes/tags/productivity/"/>
    
  </entry>
  
  <entry>
    <title>Why I Blog</title>
    <link href="https://vishnubharathi.codes/blog/why-i-blog/"/>
    <id>https://vishnubharathi.codes/blog/why-i-blog/</id>
    <published>2025-01-12T10:44:48.000Z</published>
    <updated>2025-02-16T02:42:55.080Z</updated>
    
    <content type="html"><![CDATA[<p>It has been almost a decade since I started blogging. I have written a total of 106 blog posts during this time on a variety of <a href="https://vishnubharathi.codes/archives/">topics</a>. I guess I never really shared my motivation behind writing all these posts with anyone. So I will use this blog post as a chance to convey it.</p><h2 id="Paying-it-forward"><a href="#Paying-it-forward" class="headerlink" title="Paying it forward"></a>Paying it forward</h2><p>When I was in college, I was trying to learn node.js. None of my teachers or college friends had heard about it. It was so new. I was trying to build a chat app and came across a YouTube video where Ryan Dahl was giving an introduction to node (probably <a href="https://youtu.be/jo_B4LTHi3I?si=XvOgK4zagvA4pr-G">this video</a>). I read a lot of random blog posts about node.js and built stuff with the help of it. The same thing happened with Angular.js or whatever new technology I was trying to learn in college.</p><p>The best way to learn was by watching conference videos and reading blog posts. I have used this formula to date. Trust me, <a href="https://youtu.be/JC82Il2cjqA?si=dCmJzID8_xUIN578">You can learn anything this way!</a></p><p>I see sharing what I learn or know here as a way of paying it forward. That is the least that I can do in exchange for what I got.</p><h2 id="Like-a-Journal"><a href="#Like-a-Journal" class="headerlink" title="Like a Journal"></a>Like a Journal</h2><p>I used to write blog posts titled ‚Äúlog x = y‚Äù which used to be a weekly round-up of some things that I learned during the week. So in a way, I have used this blog as a journal of things that I learned.</p><p>I don‚Äôt always look back at my journal, but when I do I find some little things that make me smile. I moved away from this format because I want to get into writing in-depth posts on a particular topic.</p><h2 id="Dopamine-cycle"><a href="#Dopamine-cycle" class="headerlink" title="Dopamine cycle"></a>Dopamine cycle</h2><p>I recently heard of this advice from Andrej Karpathy while watching his keynote <a href="https://www.youtube.com/watch?v=tsTeEkzO9xc&amp;t=245s">here</a>: ‚Äúkeep the dopamine flowing‚Äù. </p><blockquote><p>Be aware of your psychology, your brain, how it works, and what it needs to keep going and to keep inspired‚Ä¶ Your brain is a reward machine and it wants rewards and you need to give it rewards.</p></blockquote><p>I find it rewarding when I publish a blog post and people find it useful and talk to me about it. I have had people messaging me, emailing me, talking to me at work, and even in interviews (where I am an interviewer) about some blog post that I wrote. It is a great ice-breaker.</p><p>These blog posts are a way for me to keep the dopamine cycle going - I wish I had posted more on this blog to keep the cycle running! </p><h2 id="Always-read-the-comments"><a href="#Always-read-the-comments" class="headerlink" title="Always read the comments"></a>Always read the comments</h2><p>I heard this advice from Sam Altman a long time back: <a href="https://blog.samaltman.com/dont-read-the-comments">Don‚Äôt Read The Comments</a>. It was targeted towards people building new projects and startups. I guess the opposite of that advice applies to people who are writing blog posts to share knowledge: ‚ÄúAlways read the comments‚Äù</p><p>I have had a few instances where my posts ended up on <a href="https://news.ycombinator.com/">the orange site</a> or similar places on the internet. Often times I get to learn more from the comments than the blog post itself by reading through all the comments (<a href="https://news.ycombinator.com/item?id=27410910">an example here</a>). Comments are a great way to get feedback and learn from others.</p><h2 id="Free-and-open"><a href="#Free-and-open" class="headerlink" title="Free and open"></a>Free and open</h2><p>I like to keep this blog free from ads. I have no intention of pay-walling anything that I write here. You are free to <a href="https://creativecommons.org/licenses/by/4.0/">share and adapt</a> anything on this website.</p><p>I had my calling after watching the <a href="https://www.youtube.com/watch?v=9vz06QO3UkQ">Internet‚Äôs Own Boy</a> documentary: Knowledge is so important for humanity. Access to information is what will truly empower humans in this information age.</p><p>In my case, the access to those blog posts which were free and open empowered me to learn and grow. It helped me achieve my dream of working in tech. Imagine if all those information were locked behind some paywall.</p><h2 id="Timeless"><a href="#Timeless" class="headerlink" title="Timeless"></a>Timeless</h2><p>I <em>really</em> <em>really</em> want to write blog posts that are timeless. I believe I have written a few such posts in this blog (I will leave it as a reader‚Äôs exercise to identify those posts üòÖ)</p><p>You can find many technical blog posts in this blog but the problem is that tech can become outdated (but I still want to write them because they serve a different purpose).</p><p>My main motivation for continuing to contribute to this blog is to capture and create timeless wisdom. I see it as a kind of wealth.</p><h2 id="Head-fake"><a href="#Head-fake" class="headerlink" title="Head fake"></a>Head fake</h2><p>If you haven‚Äôt watched the <a href="https://www.youtube.com/watch?v=ji5_MqicxSo">Randy Pausch Last Lecture: Achieving Your Childhood Dreams</a>, you should stop reading this blog post and finish watching that first!</p><p>I will summarize what happens in that video: Professor Randy Pausch shared a lot of timeless wisdom in that video. He introduced me to the word ‚Äúhead fake‚Äù which he references in the talk.</p><blockquote><p>He described as a ‚Äúhead fake‚Äù, for example, the phenomenon of parents encouraging their children to play football. Parents tell their children to play sports not because they really want them to become football stars, he said, but to help them develop collaboration and socializing skills</p></blockquote><p>This is going to be a spoiler if you haven‚Äôt watched the video yet. Towards the end of the video, he reveals the second head fake of his talk.</p><blockquote><p>Have you figured out the second head fake?</p><p>This talk is not for you. It is for my kids.</p></blockquote><p>This blog is a head fake. It is for my daughter and sisters.</p><p>This is about the next-gen. What can they learn from my mistakes and experiences? That goes in this blog. As simple as that!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It has been almost a decade since I started blogging. I have written a total of 106 blog posts during this time on a variety of &lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="life" scheme="https://vishnubharathi.codes/tags/life/"/>
    
      <category term=" blogging" scheme="https://vishnubharathi.codes/tags/blogging/"/>
    
  </entry>
  
  <entry>
    <title>Baking a React App into a Go server</title>
    <link href="https://vishnubharathi.codes/blog/baking-a-react-app-into-a-go-server/"/>
    <id>https://vishnubharathi.codes/blog/baking-a-react-app-into-a-go-server/</id>
    <published>2024-12-22T17:51:09.000Z</published>
    <updated>2025-02-16T02:42:55.071Z</updated>
    
    <content type="html"><![CDATA[<p>After many long years, I am trying to write a small web UI for a side project. It is going to be a single-page application that I would like to be served from my server written in Go. I was introduced to <a href="https://vite.dev/">vite</a> which gave me a hello world <a href="https://react.dev/">react</a> app that gave me web assets like</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">webapp&#x2F;</span><br><span class="line">‚îú‚îÄ‚îÄ dist</span><br><span class="line">‚îÇ¬†¬† ‚îú‚îÄ‚îÄ assets</span><br><span class="line">‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index-n_ryQ3BS.css</span><br><span class="line">‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index-uO412iEj.js</span><br><span class="line">‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ react-CHdo91hT.svg</span><br><span class="line">‚îÇ¬†¬† ‚îú‚îÄ‚îÄ index.html</span><br><span class="line">‚îÇ¬†¬† ‚îî‚îÄ‚îÄ vite.svg</span><br><span class="line">‚îú‚îÄ‚îÄ index.html</span><br></pre></td></tr></table></figure><h2 id="Basic-serve"><a href="#Basic-serve" class="headerlink" title="Basic serve"></a>Basic serve</h2><p>In order to serve that app from my Go server, I would initialize it to be a go package that exposes a web server that serves it. That means creating <code>webapp/webapp.go</code> in our vite project.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> webapp</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">*http.Server</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(addr <span class="keyword">string</span>)</span> *<span class="title">Server</span></span> &#123;</span><br><span class="line">routes := http.NewServeMux()</span><br><span class="line"></span><br><span class="line">routes.HandleFunc(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">fmt.Fprintln(w, <span class="string">&quot;TODO&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;Server&#123;</span><br><span class="line">Server: &amp;http.Server&#123;</span><br><span class="line">Addr:    addr,</span><br><span class="line">Handler: routes,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now our react app is also a Go package which could be consumed from other packages like this</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">webServer := webapp.New(webServerAddr)</span><br><span class="line"><span class="keyword">if</span> err := webServer.ListenAndServe(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalln(<span class="string">&quot;Error starting web server&quot;</span>, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Searching-for-a-handler"><a href="#Searching-for-a-handler" class="headerlink" title="Searching for a handler"></a>Searching for a handler</h2><p>We would like to serve whatever is in our  <code>dist</code> folder when someone hits our web server. So I searched if there were any such handlers and found two such functions in the standard library.  So that we could register the handler in our <code>routes</code> ServeMux.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FileServer</span><span class="params">(root FileSystem)</span> <span class="title">Handler</span></span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">FileServerFS</span><span class="params">(root fs.FS)</span> <span class="title">Handler</span></span></span><br></pre></td></tr></table></figure><p>The difference between them is their arguments. <code>FileSystem</code> is part of the <code>net/http</code> library and I found this note about it in the comments:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This interface predates the [fs.FS] interface, which can be used instead:</span></span><br><span class="line"><span class="comment">// the [FS] adapter function converts an fs.FS to a FileSystem.</span></span><br><span class="line"><span class="keyword">type</span> FileSystem <span class="keyword">interface</span> &#123;</span><br><span class="line">Open(name <span class="keyword">string</span>) (File, error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So it is a deprecated interface in favor of a new interface. That leaves us with <code>fs.FS</code>.</p><p>It seems like <code>fs.FS</code> is an interface that represents a file system and is present in the <a href="https://pkg.go.dev/io/fs">io/fs package</a>. I remember that they introduced the <code>io</code> package in the standard library to deprecate the <code>ioutil</code> package and this should have been a sweet addition that came with it?</p><p>Anyway, we will choose <code>FileServerFS</code> now.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">routes.Handle(<span class="string">&quot;/&quot;</span>, http.FileServerFS(????))</span><br></pre></td></tr></table></figure><h2 id="A-filesystem"><a href="#A-filesystem" class="headerlink" title="A filesystem"></a>A filesystem</h2><p>So we need a filesystem that we can give to our <code>http.FileServerFS()</code> method. I searched through the possible implementations of <code>fs.FS</code> interface and the first one that I was able to surface is <code>os.DirFS</code>.</p><p>It is a function that gives <code>fs.FS</code> based on the contents of a file system directory.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">routes.Handle(<span class="string">&quot;/&quot;</span>, http.FileServerFS(os.DirFS(<span class="string">&quot;/home/vishnu/pers/gokakashi/webapp/dist&quot;</span>)))</span><br></pre></td></tr></table></figure><p>The problem with this approach is, that we will hit troubles when we ship our server to a machine on the internet. Now, someone has to take care of creating <code>/home/vishnu/pers/gokakashi/webapp/dist</code> on the server machine or point to a directory that contains our web app‚Äôs assets. That becomes messy, right?</p><p>What I would ideally want is to embed all my HTML, CSS, JS files inside our go server binary itself. That way we ship only the binary and it will be able to serve the web app.</p><h2 id="Baking"><a href="#Baking" class="headerlink" title="Baking"></a>Baking</h2><p>I have heard of the <code>embed</code> package which could be used for embedding files inside the go binary. There is <code>embed.FS</code> which satisfied <code>fs.FS</code> interface. So we could probably use it to bake in our assets.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:embed dist</span></span><br><span class="line"><span class="keyword">var</span> WebAssets embed.FS</span><br></pre></td></tr></table></figure><p>We make use of it like</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">routes.Handle(<span class="string">&quot;/&quot;</span>, http.FileServerFS(WebAssets))</span><br></pre></td></tr></table></figure><p>This renders:<br><img src="https://github.com/user-attachments/assets/2fa7a78e-eeb1-4aaf-b969-01c38e044777" alt="image"></p><p>(not quite, what we want) Instead of embedding what is inside dist folder, we have embedded the <code>dist</code> folder itself. To inspect what got embedded, we could use the <code>go list</code> command like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go list -f &#39;&#123;&#123;.EmbedFiles&#125;&#125;&#39; .</span><br><span class="line">[dist&#x2F;assets&#x2F;index-n_ryQ3BS.css dist&#x2F;assets&#x2F;index-uO412iEj.js dist&#x2F;assets&#x2F;react-CHdo91hT.svg dist&#x2F;index.html dist&#x2F;vite.svg]</span><br></pre></td></tr></table></figure><p>I tried doing <code>//go:embed dist/*</code> instead of <code>//go:embed dist</code>, that didn‚Äôt help as well because (from Go docs)</p><blockquote><p>The difference is that ‚Äòimage/*‚Äô embeds ‚Äòimage/.tempfile‚Äô while ‚Äòimage‚Äô does not. Neither embeds ‚Äòimage/dir/.tempfile‚Äô.</p></blockquote><p>If I used <code>//go:embed dist/index.html</code>, then the file seems to be still embedded with the <code>dist</code> folder.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go list -f &#39;&#123;&#123;.EmbedFiles&#125;&#125;&#39; .</span><br><span class="line">[dist&#x2F;index.html]</span><br></pre></td></tr></table></figure><p>I was wondering if there is a way to embed the contents of <code>dist</code> at the root of the FS instead of the FS directory. There seems to be no provision in the <code>embed</code> package to do it. Because it operates at a package level, and it would force us to declare <code>dist</code> as a separate go package and would force us to remove <code>dist</code> folder from <code>.gitignore</code>. That would be messy.</p><h2 id="Traverse"><a href="#Traverse" class="headerlink" title="Traverse"></a>Traverse</h2><p>We know that we can‚Äôt change the root of the file system, but what if we traverse to a folder and get an <code>fs.FS</code> representation that projects the selected directory as the root? I suspected that there might be method to help with that in the <code>io/fs</code> package.</p><p>yep, look what I discovered:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sub returns an FS corresponding to the subtree rooted at fsys&#x27;s dir.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Sub</span><span class="params">(fsys FS, dir <span class="keyword">string</span>)</span> <span class="params">(FS, error)</span></span></span><br></pre></td></tr></table></figure><p>Now, we just make use of it like this</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//go:embed dist</span></span><br><span class="line"><span class="keyword">var</span> WebAssets embed.FS</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(addr <span class="keyword">string</span>)</span> <span class="params">(*Server, error)</span></span> &#123;</span><br><span class="line">routes := http.NewServeMux()</span><br><span class="line"></span><br><span class="line">reactApp, err := fs.Sub(WebAssets, <span class="string">&quot;dist&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;error finding the dist folder: %w&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">routes.Handle(<span class="string">&quot;/&quot;</span>, http.FileServerFS(reactApp))</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;Server&#123;</span><br><span class="line">Server: &amp;http.Server&#123;</span><br><span class="line">Addr:    addr,</span><br><span class="line">Handler: routes,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And boom!</p><p><img src="https://github.com/user-attachments/assets/150ae840-d520-47e8-9e87-ddf01713614f" alt="Screenshot from 2024-12-21 12-48-57"></p><h2 id="Compile-time"><a href="#Compile-time" class="headerlink" title="Compile time"></a>Compile time</h2><p>The <code>//go:embed dist</code> directive is evaluated during compile time. So when you run <code>go build</code>, the compiler looks for a <code>dist</code> folder and bakes it in the binary.</p><p>Let us say we miss generating the <code>dist</code> folder (maybe we failed running <code>npm run build</code>), that would lead to a compile-time error</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go build </span><br><span class="line">webapp&#x2F;webapp.go:14:12: pattern dist: no matching files found</span><br></pre></td></tr></table></figure><p>This way we get the guarantee that no one is able to build our Go app without building the frontend that is intended to be embedded in it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;After many long years, I am trying to write a small web UI for a side project. It is going to be a single-page application that I would l
      
    
    </summary>
    
    
      <category term="programming" scheme="https://vishnubharathi.codes/tags/programming/"/>
    
      <category term="go" scheme="https://vishnubharathi.codes/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>Too many clocks at my home</title>
    <link href="https://vishnubharathi.codes/blog/too-many-clocks-at-my-home/"/>
    <id>https://vishnubharathi.codes/blog/too-many-clocks-at-my-home/</id>
    <published>2024-12-12T18:17:26.000Z</published>
    <updated>2025-02-16T02:42:55.080Z</updated>
    
    <content type="html"><![CDATA[<p>This is supposed to be a distributed systems blog post that I <a href="https://bsky.app/profile/vishnubharathi.codes/post/3lcyrndlxvs2u">promised</a> to write, but I am unable to keep quiet about a fact that I realized while thinking about writing this post.</p><p>That is, ‚ÄúI got too many clocks at my home‚Äù - like one per room, except the bathrooms. Trying to convince my family to allow me to achieve full coverage, but they just won‚Äôt allow me to have a ticking clock in our bathrooms - lol üòÇ </p><h2 id="Clock-Skew"><a href="#Clock-Skew" class="headerlink" title="Clock Skew"></a>Clock Skew</h2><p>If you have a lot of clocks like me, then there is a good chance that not all the clocks in all rooms are showing the same time. The clock in my bedroom is five minutes faster than the clock in our hall. That makes me a time traveller when I go from one room to another room.</p><p>The time in my bedroom is 8:35 AM, but the time in my hall is 8:30 AM. If I believe in both of my clocks and walk from my bedroom to the hall, congrats to me because I have travelled back in time.</p><p>It seems like there is a similar situation at hand when you are running multiple different computers. Every machine has its own system clock. There is no guarantee that all the system clocks are having the same time. This difference in time has been causing headaches for programmers and this is what our computer scientists call it to be a ‚Äúclock skew‚Äù.</p><h2 id="NTP"><a href="#NTP" class="headerlink" title="NTP"></a>NTP</h2><p>What if I went through my house all day long and adjusted all the clocks to the same time? Will that make sure to get rid of the clock skew? Not really, the skew can still occur because the seconds hand in real-world clocks cannot be synchronized with one another. There are external factors like the battery power going down which could eventually cause a clock skew.</p><p>In the case of computing, there seems to be a protocol called  <a href="https://en.wikipedia.org/wiki/Network_Time_Protocol">NTP (Network Time Protocol)</a> that helps do the equivalent of me going around the house and syncing clocks. It synchronizes the clocks between computers and helps us to maintain the clock skew to be minimum. I first heard about it back in 2016 or 2017 at work when we faced some problems due to the clocks going out of sync between the machines in our system. So we had to install the NTP daemon service on all the machines to solve the problem.</p><p>If you are using an NTP daemon in production, make sure to have an alerting and monitoring setup for it. I learned that some people go to the extremes of plotting graphs against the clock skew and network latency between the machines in their system [^1]. It might be good to have a sense of how much of a clock skew can usually happen while using NTP. 100 to 500 milliseconds seem to be a practical estimate for clock skews [^2].</p><h2 id="Reference-clocks"><a href="#Reference-clocks" class="headerlink" title="Reference clocks"></a>Reference clocks</h2><p>You might be wondering if two clocks are out of sync, which one does the NTP consider a source of truth and adjust accordingly.</p><p>To understand it, we have to visit where time comes from. Prepare to be amazed by <a href="https://en.wikipedia.org/wiki/Clock#History_of_time-measuring_devices">this list</a> of all kinds of ways humans have been finding time so far in history. If you scroll to the bottom of the list, you will find two kinds of clocks that are of interest to us here.</p><h3 id="Quartz-clock"><a href="#Quartz-clock" class="headerlink" title="Quartz clock"></a>Quartz clock</h3><blockquote><p>Quartz clocks are timepieces that use an <a href="https://en.wikipedia.org/wiki/Electronic_oscillator">electronic oscillator</a> regulated by a <a href="https://en.wikipedia.org/wiki/Quartz">quartz</a> crystal to keep time. [^3]</p></blockquote><p>If you ever wondered how your laptop shows the right time when you switch it off and turn it on after a month. The reason is that your laptop contains a quartz clock with a separate battery which runs always. When your operating system boots up, it gets the time from this clock.</p><h3 id="Atomic-clock"><a href="#Atomic-clock" class="headerlink" title="Atomic clock"></a>Atomic clock</h3><blockquote><p>An atomic clock is a <a href="https://en.wikipedia.org/wiki/Clock">clock</a> that measures time by monitoring the resonant frequency of atoms. [^4]</p></blockquote><p>Atomic clocks are the most accurate clocks in existence as of now. In fact, it is so accurate that we have to infer what a second is by using it ü§Ø </p><blockquote><p>The second, symbol s, is the SI unit of time. It is defined by taking the fixed numerical value of the caesium frequency, the unperturbed ground-state hyperfine transition frequency of the caesium-133 atom, to be 9192631770 when expressed in the unit Hz, which is equal to s‚àí1.</p></blockquote><p>While storing date-time values in your applications, you might have heard of Co-ordinated Universal Time (UTC).</p><blockquote><p>UTC is based on TAI, which is a weighted average of hundreds of <a href="https://en.wikipedia.org/wiki/Atomic_clock">atomic clocks</a> worldwide.</p></blockquote><p>Now you know how UTC is calculated! If you install NTP on your machines, it will use UTC as the reference time to adjust the clock skew on your machine.</p><p>Satellites (with atomic clocks installed on them) seem to be the ultimate reference clock. GPS receivers can get signals from these satellites about what time it is. NTP uses different levels of reference clocks and these levels are called startum. The atomic clock in the satellite is the stratum 0 which is the reference clock for stratum 1 and so on. [^5]</p><h2 id="Clock-bound"><a href="#Clock-bound" class="headerlink" title="Clock bound"></a>Clock bound</h2><p>We know that we can‚Äôt trust our clocks anymore. Big giants like Google and AWS have been thinking about what they can do to improve the situation. As a result, they set up the fancy stratum 0 atomic clocks on satellites connected to their data center regions. Clock skew is inevitable, but with this fancy setup, they are able to achieve clock skews that are within certain bounds.</p><blockquote><p>In Spanner‚Äôs case, Google mentions an upper bound of 7ms‚Ä¶..</p></blockquote><p>This means two machines that are part of the spanner cluster can at-most be of 7ms apart. They cleverly use this property:</p><blockquote><p>So how does Spanner use TrueTime to provide linearizability given that there are still inaccuracies between clocks? It‚Äôs actually surprisingly simple. It waits. Before a node is allowed to report that a transaction has committed, it must wait 7ms. Because all clocks in the system are within 7ms of each other, waiting 7ms means that no subsequent transaction may commit at an earlier timestamp, even if the earlier transaction was committed on a node with a clock which was fast by the maximum 7ms. Pretty clever. [^6] </p></blockquote><p>Some interesting things to explore here would be:</p><ul><li><a href="https://cloud.google.com/spanner/docs/true-time-external-consistency">Google‚Äôs TrueTime</a></li><li><a href="https://aws.amazon.com/about-aws/whats-new/2017/11/introducing-the-amazon-time-sync-service/">Amazon‚Äôs Time Sync Service</a></li><li>AWS‚Äôs <a href="https://github.com/aws/clock-bound">clockbound library</a> can give you a timestamp and the bounds of the timestamp which can be used by your application running on EC2.</li></ul><h2 id="Causal-Ordering"><a href="#Causal-Ordering" class="headerlink" title="Causal Ordering"></a>Causal Ordering</h2><p>All the above were attempts to make the clock to be more ‚Äútrustable‚Äù. There is another extreme where things get even more interesting.</p><p>To get there, the first thing you need to note is: It is ‚Äúcausal ordering‚Äù and not ‚Äúcasual ordering‚Äù.</p><p>Causal means ‚Äúone‚Äù thing in a system <em>caused</em> some other thing in the system. If it was not for the first thing, the things that come after that would have never happened.</p><p>I sent some money to my friend and they received it in their bank account. Sending the money is the event that causes the money to be received in my friend‚Äôs account. It can‚Äôt be the other way around: My friend received some money out of nowhere and then I sent the money which went nowhere but got detected from my account - there is no causal order here.</p><p>If you think deeply, we need a clock in most of the distributed systems because we just like to have causal ordering of events happening in our system. Be it an e-commerce app or a banking app, the order in which events flow is what we are interested in.</p><h2 id="Logical-clocks"><a href="#Logical-clocks" class="headerlink" title="Logical clocks"></a>Logical clocks</h2><p>This is where things get exciting even more! Let us say we ditch our system clock altogether.</p><p>Instead of a system clock both our server(s) and client would have their own clock (typically as a shared library). Instead of observing the real-world time from this custom clock, our application logic could observe a monotonically increasing counter value. This counter value could give a number that the event can record and increment for the next event to use.</p><p>Do you see what we did here? Instead of storing ‚Äúevent A‚Äù that happened at a particular time <code>hh:mm:ss</code>, we record that event A happened as the Nth event in our system. If we sort the numbers stored alongside the event, we get the causal ordering of events. This can help us ensure things like my friend doesn‚Äôt get money out of nowhere.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Clock <span class="keyword">struct</span> &#123;</span><br><span class="line">time <span class="keyword">uint64</span></span><br><span class="line"></span><br><span class="line">mu sync.RWMutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Clock)</span> <span class="title">Time</span><span class="params">()</span> <span class="title">uint64</span></span> &#123;</span><br><span class="line">c.mu.RLock()</span><br><span class="line"><span class="keyword">defer</span> c.mu.RUnlock()</span><br><span class="line"><span class="keyword">return</span> c.time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Clock)</span> <span class="title">Increment</span><span class="params">()</span> <span class="title">uint64</span></span> &#123;</span><br><span class="line">c.mu.Lock()</span><br><span class="line"><span class="keyword">defer</span> c.mu.Unlock()</span><br><span class="line">c.time++</span><br><span class="line"><span class="keyword">return</span> c.time</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Both our server and client would have their own clocks.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Server <span class="keyword">struct</span> &#123;</span><br><span class="line">clock *Clock</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Client <span class="keyword">struct</span> &#123;</span><br><span class="line">clock *Clock</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And how do we synchronize the time between them? Simple! We just try to adjust the clock whenever we feel like the clock might be running behind.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Clock)</span> <span class="title">Adjust</span><span class="params">(time <span class="keyword">uint64</span>)</span></span> &#123;</span><br><span class="line">c.mu.Lock()</span><br><span class="line"><span class="keyword">defer</span> c.mu.Unlock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> c.time &gt; time &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.time = time + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Here is a toy example of this. The client talks to the server via an HTTP API and tries to store a key-value pair. It will also send its clock time. But the counter (time) value in the Client‚Äôs clock is running behind the server‚Äôs clock. So, the server can respond back with an error - maybe a 400 Bad request and a response header containing the latest server time. Now the clock can adjust itself to that time and reattempt the API call once more with the new time.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is a super toy version of what could happen in the Client</span></span><br><span class="line"><span class="comment">// I really badly want to get away with code instead of diagrams to explain this</span></span><br><span class="line"><span class="comment">// You will now have to excuse me for using `http.Get` and an unbounded recursive call here.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span> <span class="title">Store</span><span class="params">(key, value <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line">resp, err := c.Get(</span><br><span class="line">fmt.Sprintf(<span class="string">&quot;http://localhost:8080/put?key=%s&amp;value=%s,&amp;time=%d&quot;</span>,</span><br><span class="line">key, value, c.clock.Time(),</span><br><span class="line">))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> resp.Body.Close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> serverTime, err := strconv.ParseUint(resp.Header.Get(<span class="string">&quot;CLOCK_TIME&quot;</span>), <span class="number">10</span>, <span class="number">64</span>); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.clock.Adjust(serverTime)</span><br><span class="line"><span class="keyword">return</span> c.Store(key, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> resp.Status, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This <code>type Clock struct</code> that we have here is the logical clock. In fact, this was the first of its kind called the Lamport Clock [^7].</p><p>There are other types of logical clocks that can be seen in the wild like vector clocks, hybrid logical clocks, etc. Something for us to explore!</p><p>[^1]:  <a href="https://youtu.be/IjsJLTriLzs?si=qFhFtB1XfWkx1uBs">Clock Skew and Distributed Systems (Donny Nadolny, PagerDuty)</a><br>[^2]: <a href="https://www.perplexity.ai/search/what-is-the-average-clock-skew-GWjRvNpYSbmRad_YHBswMg#0">What is the average clock skew when using NTP?</a><br>[^3]: <a href="https://en.wikipedia.org/wiki/Quartz_clock">Quartz Clock</a><br>[^4]: <a href="https://en.wikipedia.org/wiki/Atomic_clock">Atomic Clock</a><br>[^5]: <a href="https://www.ntp.org/ntpfaq/NTP-s-algo/#5111-what-is-a-reference-clock">NTP FAQ</a><br>[^6]: <a href="https://www.cockroachlabs.com/blog/living-without-atomic-clocks/">Living without atomic clocks: Where CockroachDB and Spanner diverge</a><br>[^7]: Leslie Lamport. 1978. Time, clocks, and the ordering of events in a distributed system. Commun. ACM 21, 7 (July 1978), 558‚Äì565. <a href="https://doi.org/10.1145/359545.359563">https://doi.org/10.1145/359545.359563</a></p><p>~ ~ ~ ~</p><p>Hope you had a good time learning about time!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This is supposed to be a distributed systems blog post that I &lt;a href=&quot;https://bsky.app/profile/vishnubharathi.codes/post/3lcyrndlxvs2u&quot;&gt;
      
    
    </summary>
    
    
      <category term="distributed systems" scheme="https://vishnubharathi.codes/tags/distributed-systems/"/>
    
  </entry>
  
  <entry>
    <title>Fix up</title>
    <link href="https://vishnubharathi.codes/blog/fix-up/"/>
    <id>https://vishnubharathi.codes/blog/fix-up/</id>
    <published>2024-09-13T20:58:08.000Z</published>
    <updated>2025-02-16T02:42:55.073Z</updated>
    
    <content type="html"><![CDATA[<p>I want you to read this post if you are at the verge of quitting your job.</p><p>You want to quit this job because you are unhappy.</p><p>Unhappy about what? recent changes in your team, a culture shift? or maybe the thought that work is not fun here anymore? or maybe you are worried that you are going to get laid off? or maybe you feel that you are being undervalued? or maybe you feel that you are being underpaid? or maybe some other thing(s).</p><p>That‚Äôs a lot of ‚Äúmaybe‚Äùs. It doesn‚Äôt matter what the reason is, because the thing is, ‚Äúyou are unhappy‚Äù and you must do something about it.</p><p>Ok, so what can you do about it?</p><p>I realized that we have two options here.</p><p>Option one: shut up.</p><p>Option two: fix up.</p><p>Shut up means you literally shut up, grind your nights and weekends, focus on finding a new job, and quit your current job.</p><p>Fix up is a messy route. I have seen the best engineers whom I have worked with to shy away from this path. It takes a certain level of clarity, courage, and bravery to pull it off. (especially if you are living paycheck to paycheck like me - lol)</p><p>Here is how to fix up. You write down all the things that you are unhappy about on a piece of paper. Promise me that you will be brutally honest with yourself while writing this list. And here is the difficult part: You are going to go to your leadership team and share that you are unhappy and read them the list that you prepared. That usually means scheduling a call with your manager, or your manager‚Äôs manager (in case of a larger org), or your CEO (in case of startups). Meet up with the person you are most comfortable with (and that ideally will be your manager and in some unfortunate circumstances not).</p><p>Fix up will not just try to fix the situation for you. It has the potential to fix the situation for your colleagues who are in the same boat as you. It is going to empower your leadership team to do the right things. It can even save the entire company.</p><p>Here is a side note for people who are in leadership roles who are reading this post: The best thing that you can do for your team is to create an environment where one feels to ‚Äúfix up‚Äù without having to get an offer letter from another company. I don‚Äôt know how exactly you are going to do it but I will leave it as an activity for the readers.</p><p>Back to you now. I want you to seriously consider this path because it might be the shortest path to regain your happiness.</p><p>If you are in good hands, your leaders are going to empathize with you and act upon the feedback that you give them or find a way to help you. I will give you an example: I tried to ‚Äúfix up‚Äù before in one of my previous jobs (but with a new job offer though - I was such a coward, lol). I spoke with the CEO and my reason was ‚Äúwork was not fun anymore‚Äù. The CEO acted immediately. He had a bunch of interesting work for which he was not finding time/people to do. He proposed I team up with him and try it out. So for the next few months, I reported to him directly and we tackled the project. That made me regain happiness and at the same time helped the company move on to the next phase.</p><p>I mentioned courage and bravery at the start because you have to try to ‚Äúfix up‚Äù without getting a new job offer. In my above case, I did with an offer and that is a waste of time for you and the people who chose to interview you. Imagine all the time I spent preparing for interviews and all the time and energy of the company (that extended an offer) spent interviewing me. Imagine all the things that I could have done (like watching Cartoon Network or something) instead of preparing all those nights and it is such a waste to decline job offers.</p><p>So, go ahead, be brave, and fix up!</p><p>Best case, you are happy again.</p><p>Worst case, what is going to happen? Your leadership team doesn‚Äôt act up on it. I can hear the paranoid human inside you screaming, ‚ÄúWhat if they blackmark me for saying things aloud? Are they going to fire me because I am not a culture fit anymore?‚Äù. I will run by your script here. Let us hit your deepest fear, ‚ÄúThey are going to fire me‚Äù. Well, what if they do fire you? What are you going to do?</p><p>You are going to prepare full-time for interviews sitting at your comfy little house and appear for interviews and get a new job. And you are happy again.</p><p>The reason why one might not choose to fix up is because they already gave up hope on their leaders or it could be that they don‚Äôt understand the cost of switching jobs. Switching jobs is a costly act, you know! Both for you and the company. Especially in startups where one person gets to work on a lot of diverse stuff. Think about the struggle that your colleagues and your company might go through when you choose to leave them. Kind of sad, right? I am not suggesting that you should not switch jobs at all (lol, look at my LinkedIn) - you should switch if that is what makes you happy again. Remember ‚Äúyour happiness‚Äù is your core metric. When you are happy, you can make wonders happen and do your best work. But I guess your company usually deserves a fix up if you think it is going to help the company (with or without you).</p><p>~ ~ ~ ~</p><p>I would like to thank <a href="https://svs.io">svs</a> for listening to me through a career chat and offering his suggestions. That conversation made me think about and write down this blog post. BTW, if you are looking for a new job, you have to <a href="https://recruit.svs.io/">talk to him</a>.</p><p>And thanks to <code>git rebase -i</code> - that is where I copied the word ‚Äúfix up‚Äù from.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I want you to read this post if you are at the verge of quitting your job.&lt;/p&gt;
&lt;p&gt;You want to quit this job because you are unhappy.&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="career advice" scheme="https://vishnubharathi.codes/tags/career-advice/"/>
    
  </entry>
  
</feed>
