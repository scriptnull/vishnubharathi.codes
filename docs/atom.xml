<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vishnu Bharathi</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vishnubharathi.codes/"/>
  <updated>2023-01-12T21:07:05.911Z</updated>
  <id>https://vishnubharathi.codes/</id>
  
  <author>
    <name>Vishnu Bharathi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>The absolute minimum things that I need to know about Helm</title>
    <link href="https://vishnubharathi.codes/blog/the-absolute-minimum-things-that-i-need-to-know-about-helm/"/>
    <id>https://vishnubharathi.codes/blog/the-absolute-minimum-things-that-i-need-to-know-about-helm/</id>
    <published>2023-01-12T19:57:30.000Z</published>
    <updated>2023-01-12T21:07:05.911Z</updated>
    
    <content type="html"><![CDATA[<p>I am learning about <a href="https://helm.sh/">helm</a>. It is a package manager for Kubernetes.</p><p>This documentation page provided me a good starting point: <a href="https://helm.sh/docs/topics/architecture/">https://helm.sh/docs/topics/architecture/</a> and then I roamed around the docs gathering the below notes.</p><p>The latest helm version as of writing this notes is <code>v3.10.3</code>.</p><p>(If something is wrong, feel free to suggest a fix as a pull request <a href="https://github.com/scriptnull/vishnubharathi.codes">here</a>)</p><ul><li>basics<ul><li>chart - kubernetes yaml definitions to run the app  </li><li>repository - collection of charts  </li><li>release - running instance of a chart. Two releases of same chart could be running at the same time in a kubernetes cluster (example: two redis instances used by different services)  </li></ul></li><li>helm repo add [name] [url]  <ul><li>add a repo to use the charts inside it.</li></ul></li><li>helm repo update  <ul><li>updates the list of charts available in the added repositories  </li></ul></li><li><p>versioning  </p><ul><li>a chart seem to contain two versions  <ul><li>chart version  </li><li>application version  </li></ul></li><li><p>example: vault‚Äôs chart and app versions  </p><blockquote><p>NAME               CHART VERSION    APP VERSION    DESCRIPTION<br>hashicorp/vault    0.23.0           1.12.1         Official HashiCorp Vault Chart  </p></blockquote></li></ul></li><li><p>helm search hub [query]  </p><ul><li>searches for charts in artifact hub  </li></ul></li><li>helm search repo [query]  <ul><li>searches for charts in locally added repositories  </li></ul></li><li><p>helm install [release_name] [chart]  </p><ul><li>You can also use <code>helm install [chart] --generate-name</code> if you wish to generate a release name automatically (example: <code>redis-TIMESTAMP</code>)  </li><li>the order in which the kubernetes resources mentioned in the chart are installed is document at <a href="https://helm.sh/docs/intro/using_helm/#helm-install-installing-a-package">https://helm.sh/docs/intro/using_helm/#helm-install-installing-a-package</a>  </li><li><blockquote><p>Helm does not wait until all of the resources are running before it exits. Many charts require Docker images that are over 600M in size, and may take a long time to install into the cluster.  </p></blockquote></li><li><p>Use <code>helm status</code> to get the state of the install  </p></li></ul></li><li>helm show values [chart]  <ul><li>You can customize the values that are configured in a chart before deploying a release  </li><li>This command will help you understand what values are available in a chart that could be modified  </li></ul></li><li>helm install -f values.yaml [release_name] [chart]  <ul><li>the vaules in <code>values.yaml</code> file will override the config values  </li></ul></li><li>Other methods of installing charts  <ul><li>A chart repository  </li><li>A local chart archive (<code>helm install foo foo-0.1.1.tgz</code>)  </li><li>An unpacked chart directory (<code>helm install foo path/to/foo</code>)  </li><li>A full URL (<code>helm install foo https://example.com/charts/foo-1.2.3.tgz</code>)  </li></ul></li><li><p>helm upgrade [release_name] [chart]  </p><ul><li><blockquote><p>When a new version of a chart is released, or when you want to change the configuration of your release, you can use the helm upgrade command.  </p></blockquote></li></ul></li><li><p>helm get values [release_name]  </p><ul><li>Useful in getting the values used in a release  </li></ul></li><li><p>helm rollback [release_name] [revision]  </p><ul><li><blockquote><p>The above rolls back our happy-panda to its very first release version. A release version is an incremental revision. Every time an install, upgrade, or rollback happens, the revision number is incremented by 1. The first revision number is always 1.  </p></blockquote></li></ul></li><li><p>helm list  </p><ul><li>Lists all the releases  </li></ul></li><li>helm history [release_name]  <ul><li>Lists all the revisions for a release  </li><li>You can then use <code>helm get values [release_name] --revision NUMBER</code> to get the values used in a particular revision  </li></ul></li><li>Helpful options during install/upgrade/rollback  <ul><li>‚Äìtimeout  <ul><li>A <a href="https://golang.org/pkg/time/#ParseDuration">Go duration</a> value to wait for Kubernetes commands to complete. This defaults to <code>5m0s</code>.  </li></ul></li><li><code>--wait</code>: Waits until all Pods are in a ready state, PVCs are bound, Deployments have minimum (<code>Desired</code> minus <code>maxUnavailable</code>) Pods in ready state and Services have an IP address (and Ingress if a <code>LoadBalancer</code>) before marking the release as successful. It will wait for as long as the <code>--timeout</code> value. If timeout is reached, the release will be marked as <code>FAILED</code>  </li></ul></li><li>helm uninstall [release_name]  <ul><li>use <code>--keep-history</code> if you wish to the uninstalled release to show up in <code>helm list --all</code>  </li></ul></li><li>helm create [name]  <ul><li>for creating a new chart  </li></ul></li><li>helm package [folder_name]  <ul><li>should output a <code>*.tgz</code> file (known as chart archive, I guess)  </li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I am learning about &lt;a href=&quot;https://helm.sh/&quot;&gt;helm&lt;/a&gt;. It is a package manager for Kubernetes.&lt;/p&gt;
&lt;p&gt;This documentation page provided 
      
    
    </summary>
    
    
      <category term="helm" scheme="https://vishnubharathi.codes/tags/helm/"/>
    
      <category term="kubernetes" scheme="https://vishnubharathi.codes/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Reverse engineering Plausible&#39;s less than 1kb JS script</title>
    <link href="https://vishnubharathi.codes/blog/reverse-engineering-plausible-less-than-1kb-js-script/"/>
    <id>https://vishnubharathi.codes/blog/reverse-engineering-plausible-less-than-1kb-js-script/</id>
    <published>2023-01-08T00:32:14.000Z</published>
    <updated>2023-01-12T21:07:05.911Z</updated>
    
    <content type="html"><![CDATA[<p>‚ö†Ô∏è oops, I published this blog post by mistake before completing it üòÖ LOL - I am not sure how to unpublish this now :D so I am going to leave this as it is and remove this warning line once the post is complete. ‚ö†Ô∏è</p><p><a href="https://plausible.io/">Plausible</a> is ‚ÄúSimple and privacy-friendly Google Analytics alternative‚Äù. It is an open-source software. While trying to self-host it, I arrived at <a href="https://plausible.io/lightweight-web-analytics">a page</a> which talks about their less than 1kb analytics script. It got me curious about what would be inside it ü§î</p><p>So, here we go. Let us start to understand this from scratch.</p><h2 id="Adding-the-script"><a href="#Adding-the-script" class="headerlink" title="Adding the script"></a>Adding the script</h2><p>When you want to enable Plausible analytics for your website, it seems like you would start by adding this little snippet to your website.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">data-domain</span>=<span class="string">&quot;domain.com&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">&quot;https://plausible.io/js/script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>script</code> tag is used to load JavaScript on the webpage.</li><li><code>src</code> is the web address to the contents of the JavaScript.</li></ul><p>Bigger question here is, ‚Äúwhat does <code>defer</code> and <code>data-domain</code> do?‚Äù</p><p>Reading through the MDN docs, I learnt that the browser would defer the execution of the JS script to a time when all of the HTML is loaded and parsed. That means all the HTML tags from <code>&lt;html&gt;....&lt;/html&gt;</code> would be present when the script gets executed.</p><p>More specfically, it seems like the script would get eexecuted before the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/DOMContentLoaded_event">DOMContentLoaded event</a>. This event waits only for the loading and parsing of HTML and does not wait for other things like stylesheets, images, etc. The more common <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event">load</a> seem to be responsible for catching the occurence of loading the HTML document and all its dependencies like the stylesheets, images, etc.</p><p>Okay, so this way the script doesn‚Äôt immediately try to load and block things and it waits for at-least a skeleton of HTML to load.</p><p>Regarding the <code>data-domain</code> part, I can‚Äôt seem to find references of it in the MDN docs for the script tag. So it is not an in-built attribute of the <code>script</code> tag. I think it might be a way of passing data from HTML to the JS script. Let us continue and see where this leads us.</p><h2 id="The-script"><a href="#The-script" class="headerlink" title="The script"></a>The script</h2><p>This is the entire script.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="string">&quot;use strict&quot;</span>;<span class="keyword">var</span> a=<span class="built_in">window</span>.location,r=<span class="built_in">window</span>.document,o=r.currentScript,s=o.getAttribute(<span class="string">&quot;data-api&quot;</span>)||<span class="keyword">new</span> URL(o.src).origin+<span class="string">&quot;/api/event&quot;</span>;<span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params">t</span>)</span>&#123;<span class="built_in">console</span>.warn(<span class="string">&quot;Ignoring Event: &quot;</span>+t)&#125;<span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">t,e</span>)</span>&#123;<span class="keyword">if</span>(<span class="regexp">/^localhost$|^127(\.[0-9]+)&#123;0,2&#125;\.[0-9]+$|^\[::1?\]$/</span>.test(a.hostname)||<span class="string">&quot;file:&quot;</span>===a.protocol)<span class="keyword">return</span> l(<span class="string">&quot;localhost&quot;</span>);<span class="keyword">if</span>(!(<span class="built_in">window</span>._phantom||<span class="built_in">window</span>.__nightmare||<span class="built_in">window</span>.navigator.webdriver||<span class="built_in">window</span>.Cypress))&#123;<span class="keyword">try</span>&#123;<span class="keyword">if</span>(<span class="string">&quot;true&quot;</span>===<span class="built_in">window</span>.localStorage.plausible_ignore)<span class="keyword">return</span> l(<span class="string">&quot;localStorage flag&quot;</span>)&#125;<span class="keyword">catch</span>(t)&#123;&#125;<span class="keyword">var</span> i=&#123;&#125;;i.n=t,i.u=a.href,i.d=o.getAttribute(<span class="string">&quot;data-domain&quot;</span>),i.r=r.referrer||<span class="literal">null</span>,i.w=<span class="built_in">window</span>.innerWidth,e&amp;&amp;e.meta&amp;&amp;(i.m=<span class="built_in">JSON</span>.stringify(e.meta)),e&amp;&amp;e.props&amp;&amp;(i.p=e.props);<span class="keyword">var</span> n=<span class="keyword">new</span> XMLHttpRequest;n.open(<span class="string">&quot;POST&quot;</span>,s,!<span class="number">0</span>),n.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;text/plain&quot;</span>),n.send(<span class="built_in">JSON</span>.stringify(i)),n.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="number">4</span>===n.readyState&amp;&amp;e&amp;&amp;e.callback&amp;&amp;e.callback()&#125;&#125;&#125;<span class="keyword">var</span> e=<span class="built_in">window</span>.plausible&amp;&amp;<span class="built_in">window</span>.plausible.q||[];<span class="built_in">window</span>.plausible=t;<span class="keyword">for</span>(<span class="keyword">var</span> i,n=<span class="number">0</span>;n&lt;e.length;n++)t.apply(<span class="built_in">this</span>,e[n]);<span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params"></span>)</span>&#123;i!==a.pathname&amp;&amp;(i=a.pathname,t(<span class="string">&quot;pageview&quot;</span>))&#125;<span class="keyword">var</span> w,d=<span class="built_in">window</span>.history;d.pushState&amp;&amp;(w=d.pushState,d.pushState=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;w.apply(<span class="built_in">this</span>,<span class="built_in">arguments</span>),p()&#125;,<span class="built_in">window</span>.addEventListener(<span class="string">&quot;popstate&quot;</span>,p)),<span class="string">&quot;prerender&quot;</span>===r.visibilityState?r.addEventListener(<span class="string">&quot;visibilitychange&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;i||<span class="string">&quot;visible&quot;</span>!==r.visibilityState||p()&#125;):p()&#125;();</span><br></pre></td></tr></table></figure><p>Feels small. Let me try to get some line breaks to make it more readable.</p><p>oh wait! Plausible is an Open Source Software. That means, I can try to get the source code of the un-minified version of the above code.</p><p>Going to the plausible <a href="https://github.com/plausible/analytics">github repo</a>, pressing ‚Äút‚Äù and typing ‚Äúplausible.js‚Äù landed me to the file that is in need: <a href="https://github.com/plausible/analytics/blob/1772ddff17f5c2880400f7f7c42d7c1aa772feef/tracker/src/plausible.js">https://github.com/plausible/analytics/blob/1772ddff17f5c2880400f7f7c42d7c1aa772feef/tracker/src/plausible.js</a></p><p>Let us start reading the code now!</p><h2 id="The-code"><a href="#The-code" class="headerlink" title="The code"></a>The code</h2><p>The script starts with a good old immediately invoked anonymous function and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode">‚Äòuse strict‚Äô notation</a>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">  &#x27;use strict&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>After that some variables and functions are getting defined.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> location = <span class="built_in">window</span>.location</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">document</span> = <span class="built_in">window</span>.document</span><br><span class="line"></span><br><span class="line">&#123;&#123;#<span class="keyword">if</span> compat&#125;&#125;</span><br><span class="line"><span class="keyword">var</span> scriptEl = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;plausible&#x27;</span>);</span><br><span class="line">&#123;&#123;<span class="keyword">else</span>&#125;&#125;</span><br><span class="line"><span class="keyword">var</span> scriptEl = <span class="built_in">document</span>.currentScript;</span><br><span class="line">&#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br><span class="line"><span class="keyword">var</span> endpoint = scriptEl.getAttribute(<span class="string">&#x27;data-api&#x27;</span>) || defaultEndpoint(scriptEl)</span><br></pre></td></tr></table></figure><p><code>location</code> and <code>document</code> are okay - probably defined to avoid typing <code>window</code> repeatedly. <code>&#123;&#123;#if compat&#125;&#125;</code> seems like a server-renered template language notation. They are using it to get a reference to the script element which is executing the plausible script. After that <code>endpoint</code> variable is set by picking the <code>data-api</code> if it is present on the script tag or by calling a function called <code>defaultEndpoint</code>.</p><p>Since the script tag doesn‚Äôt have the <code>data-api</code> attribute, let us look at what <code>defaultEndpoint</code> function does.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defaultEndpoint</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">  &#123;&#123;#<span class="keyword">if</span> compat&#125;&#125;</span><br><span class="line">  <span class="keyword">var</span> pathArray = el.src.split( <span class="string">&#x27;/&#x27;</span> );</span><br><span class="line">  <span class="keyword">var</span> protocol = pathArray[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> host = pathArray[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">return</span> protocol + <span class="string">&#x27;//&#x27;</span> + host  + <span class="string">&#x27;/api/event&#x27;</span>;</span><br><span class="line">  &#123;&#123;<span class="keyword">else</span>&#125;&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> URL(el.src).origin + <span class="string">&#x27;/api/event&#x27;</span></span><br><span class="line">  &#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>At this point, I am guessing <code>compat</code> is for compatibility with old browsers. For now, my browser us comfortable using the <code>else</code> block. So, let us zoom on to that. It returns <code>new URL(el.src).origin + &#39;/api/event&#39;</code>. That means, it takes the script element‚Äôs src attribute and forms a new URL object and get‚Äôs the origin property.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; new URL(&quot;https:&#x2F;&#x2F;plausible.io&#x2F;js&#x2F;script.js&quot;).origin</span><br><span class="line"></span><br><span class="line">&#39;https:&#x2F;&#x2F;plausible.io&#39; + &#39;&#x2F;api&#x2F;event&#39;</span><br></pre></td></tr></table></figure><p>Moving on. There is this little <code>warn</code> function that is bugging myself to paste it here.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warn</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.warn(<span class="string">&#x27;Ignoring Event: &#x27;</span> + reason);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I cleaned up all the server-side rendered templates to make code folding work for the script :D With that, we are entering the real action.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> queue = (<span class="built_in">window</span>.plausible &amp;&amp; <span class="built_in">window</span>.plausible.q) || []</span><br></pre></td></tr></table></figure><p>So, we are creating a queue which hopefully is getting saved in <code>window.plausible.q</code> object further down the lane.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.plausible = trigger</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; queue.length; i++) &#123;</span><br><span class="line">  trigger.apply(<span class="built_in">this</span>, queue[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>trigger</code> is a big function and is getting assigned to <code>window.plausible</code>. After that, we call <code>trigger</code> function for every element in the queue. Initially, the queue will be empty, so I am going to see what is happening when that is the case.</p><p>Now there is a divide happening.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#<span class="keyword">if</span> hash&#125;&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>, page)</span><br><span class="line">&#123;&#123;<span class="keyword">else</span>&#125;&#125;</span><br><span class="line"><span class="keyword">var</span> his = <span class="built_in">window</span>.history</span><br><span class="line"><span class="keyword">if</span> (his.pushState) &#123;</span><br><span class="line">  <span class="keyword">var</span> originalPushState = his[<span class="string">&#x27;pushState&#x27;</span>]</span><br><span class="line">  his.pushState = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    originalPushState.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    page();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;popstate&#x27;</span>, page)</span><br><span class="line">&#125;</span><br><span class="line">&#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br></pre></td></tr></table></figure><br>If the URL contains <code>#some-id</code> at the end, then the if block would be executed and if the URL doesn‚Äôt contain any reference to an HTML element identifier, then the <code>else</code> block is executed.</p><p>TIL that there is a DOM event called <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/hashchange_event">hashchange</a>.</p><blockquote><p>The hashchange event is fired when the fragment identifier of the URL has changed (the part of the URL beginning with and following the # symbol).</p></blockquote><p>So, if the page‚Äôs URL contains the <code>#</code> suffix, then this makes sures that the <code>page</code> function is executed after the fragment identified of the URL is changed.</p><p>In the other case, we seem to access <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/history">window.history</a>.</p><p>~ ~ ~ ~</p><p>To be continued.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;‚ö†Ô∏è oops, I published this blog post by mistake before completing it üòÖ LOL - I am not sure how to unpublish this now :D so I am going to 
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://vishnubharathi.codes/tags/javascript/"/>
    
      <category term="tinkering" scheme="https://vishnubharathi.codes/tags/tinkering/"/>
    
  </entry>
  
  <entry>
    <title>My second conference talk üé§</title>
    <link href="https://vishnubharathi.codes/blog/my-second-conference-talk/"/>
    <id>https://vishnubharathi.codes/blog/my-second-conference-talk/</id>
    <published>2023-01-07T19:51:45.000Z</published>
    <updated>2023-01-12T21:07:05.911Z</updated>
    
    <content type="html"><![CDATA[<p>In 2021, I managed to give <a href="https://vishnubharathi.codes/blog/my-first-ever-conference-talk/">my first-ever conference talk</a>. In 2022, I managed to pull off my second conference talk.</p><p>I had the same level of excitement this time too! I feel pretty good about how it turned out to be!</p><p>It was a CI/CD conference hosted by buildkite: <a href="https://buildkite.com/unblock">https://buildkite.com/unblock</a></p><p>I am going to copy paste my talk abstract here (to see if I can get you intrigued :D)</p><blockquote><p>A World Tour of Dynamic Pipelines</p><p>This is the story of how the engineering team at Hasura burned down 2000 lines of YAML with the help of dynamic pipelines. The complexity of the CI/CD configuration grew as the team grew, which led the team to rewrite their configuration in a statically-typed programming language‚Äìdynamically generating pipelines.</p><p>This talk is a practical view into Hasura‚Äôs current system and a documentary on the lessons and insights the team gained over the past year.</p></blockquote><p>If that feels like something that you would spend 18 minutes and 45 seconds listening to, you are lucky.</p><p>Because my second-ever conference talk is available on YouTube!</p><iframe width="560" height="315" src="https://www.youtube.com/embed/ih6PFwzgwqk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><p>~ ~ ~ ~</p><p>Hope it was useful!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In 2021, I managed to give &lt;a href=&quot;https://vishnubharathi.codes/blog/my-first-ever-conference-talk/&quot;&gt;my first-ever conference talk&lt;/a&gt;. 
      
    
    </summary>
    
    
      <category term="conference" scheme="https://vishnubharathi.codes/tags/conference/"/>
    
      <category term="milestone" scheme="https://vishnubharathi.codes/tags/milestone/"/>
    
  </entry>
  
  <entry>
    <title>Today&#39;s thought</title>
    <link href="https://vishnubharathi.codes/blog/todays-thought/"/>
    <id>https://vishnubharathi.codes/blog/todays-thought/</id>
    <published>2022-05-19T03:15:50.000Z</published>
    <updated>2023-01-12T21:07:05.911Z</updated>
    
    <content type="html"><![CDATA[<p>We are currently visiting my sisters (cousins) who were on school vacation in the past week and just got back to school this week. Last night one of my sisters came to me with a piece of paper and told me that she would like to practice a speech. It was a very small essay called ‚ÄúToday‚Äôs Thought‚Äù. It seems like an essay that is containing a thought would be read by a student every day in their morning school gathering where they do prayers. It was my sister‚Äôs chance to read out ‚ÄúToday‚Äôs thought‚Äù for today (hope she did great! I will get to know once gets home today.)</p><p>I asked my sister to read out and practice in front of us yesterday. It was great to listen to her - like a piece of wisdom that I seek for a long while yet unattained. Sometimes some thoughts are known to us, but maybe somewhere along the lines we forget or things change that we miss that viewpoint that made us good in the past. So, I would like to share ‚ÄúToday‚Äôs thought‚Äù that was read by her to us in this blog post.</p><blockquote><p>Today‚Äôs thought:</p><p>‚ÄúDon‚Äôt be afraid to start again. This time, you‚Äôre not starting from scratch. You‚Äôre starting from experience.‚Äù</p><p>Meaning - Failure is common in life and we need to start again. However, we should not fear to start again because this time, we have the support of our experience. Experience will make it easy for us to start and win again.</p><p>I repeat the thought:</p><p>‚ÄúDon‚Äôt be afraid to start again. This time, you‚Äôre not starting from scratch. You‚Äôre starting from experience.‚Äù</p></blockquote><p><img src="/images/todays-thought.jpg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;We are currently visiting my sisters (cousins) who were on school vacation in the past week and just got back to school this week. Last n
      
    
    </summary>
    
    
      <category term="life" scheme="https://vishnubharathi.codes/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>Exploring CUE</title>
    <link href="https://vishnubharathi.codes/blog/cuelang/"/>
    <id>https://vishnubharathi.codes/blog/cuelang/</id>
    <published>2022-04-16T19:45:31.000Z</published>
    <updated>2023-01-12T21:07:05.903Z</updated>
    
    <content type="html"><![CDATA[<p>When I was working on <a href="https://hasura.io/blog/what-we-learnt-by-migrating-from-circleci-to-buildkite">this project</a> at work, I wished to take a closer look at CUE. It seemed like a candidate for the project that we were undertaking (defining CI configs). But we didn‚Äôt end up choosing it at that time. We ended up using golang for writing our CI config - reasons: Turing completeness, familiarity for the team, good tooling, ease for other teams to understand, and a great deal of support from the compiler.</p><p>But tonight, I would like to take a closer look at CUE. The main reason for my curiosity is the recently released <a href="https://dagger.io">dagger</a> project. CUE seems to be at the center of this project. I hope I could understand the reason for that preference during my exploration here.</p><p>Also, I have been dabbling in this problem space for a long while. I know that the pain is real - That 2000 lines CI config written as YAML file, that 1800 lines <a href="https://json-schema.org">JSON schema</a> file - I have edited them all. They have all hurt me! It is good to see projects emerging that acknowledge that this problem exists.</p><h1 id="CUE-and-its-history"><a href="#CUE-and-its-history" class="headerlink" title="CUE and its history"></a>CUE and its history</h1><p>Time to borrow some quotes from CUE docs:</p><blockquote><p>CUE is an open-source data validation language and inference engine with its roots in logic programming. Although the language is not a general-purpose programming language, it has many applications, such as data validation, data templating, configuration, querying, code generation, and even scripting</p></blockquote><p>And here is the gist of where it came from:</p><blockquote><p>Although it is a very different language, the roots of CUE lie in GCL, the dominant configuration language in use at Google as of this writing. It was originally designed to configure Borg, the predecessor of Kubernetes.</p></blockquote><p>CUE has a set of philosophies and principles, which I hope to revisit at the end of this blog post to get a better idea of how they are practically applied.</p><h1 id="Use-cases"><a href="#Use-cases" class="headerlink" title="Use-cases"></a>Use-cases</h1><p>Starting by reading - <a href="https://cuelang.org/docs/usecases/">https://cuelang.org/docs/usecases/</a></p><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>The first line in docs - I love it &lt;3</p><blockquote><p>Arguably, validation should be the foremost task of any configuration language. Most configuration languages, however, focus on boilerplate removal. CUE is different in that it takes the validation first stance.</p></blockquote><p>One more point that I want to highlight is this:</p><blockquote><p>CUE basic operation merges configurations in a way that the outcome is always the same regardless of the order in which it is carried out (it is associative, commutative, and idempotent).</p></blockquote><p>This means that the order in which we write a config in the config file does not matter - pretty much like other config formats.</p><h3 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h3><p>One of the cool things that CUE is doing which we don‚Äôt see much in the wild is having ‚Äútypes‚Äù for the configuration. Like we mention types in a real programming language, we could use types in CUE to represent how the config should look like. I guess this in turn will be used by the tooling to validate the config.</p><p>Example config from the docs:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#Spec: &#123;</span><br><span class="line">  kind: string</span><br><span class="line"></span><br><span class="line">  name: &#123;</span><br><span class="line">    first:   !&#x3D;&quot;&quot;  &#x2F;&#x2F; must be specified and non-empty</span><br><span class="line">    middle?: !&#x3D;&quot;&quot;  &#x2F;&#x2F; optional, but must be non-empty when specified</span><br><span class="line">    last:    !&#x3D;&quot;&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F; The minimum must be strictly smaller than the maximum and vice versa.</span><br><span class="line">  minimum?: int &amp; &lt;maximum</span><br><span class="line">  maximum?: int &amp; &gt;minimum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now the above type called ‚ÄúSpec‚Äù could be used by the actual config like this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spec: #Spec</span><br><span class="line">spec: &#123;</span><br><span class="line">  knid: &quot;Homo Sapiens&quot; &#x2F;&#x2F; error, misspelled field</span><br><span class="line"></span><br><span class="line">  name: first: &quot;Jane&quot;</span><br><span class="line">  name: last:  &quot;Doe&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Boilerplate-and-Inheritance"><a href="#Boilerplate-and-Inheritance" class="headerlink" title="Boilerplate and Inheritance"></a>Boilerplate and Inheritance</h3><p>Copy pasting a hundred lines of config (boilerplate) to add or edit one line of config - done that ‚úîÔ∏è</p><p>Opening a random file with 2 lines of config and wondering ‚Äúwhat does this even do ü§î‚Äù - done that ‚úîÔ∏è (because the actual config that contains most of the config is placed in a different file and is <em>inherited</em> to this config file to reduce boilerplate)</p><p>CUE is a config language, so obviously there is a mechanism to avoid boilerplate but this point sounds particularly interesting:</p><blockquote><p>Like with other configuration languages, CUE can add complexity if values are organized to come from multiple places. However, as CUE disallows overrides, deep layerings are naturally prevented.</p></blockquote><p>CUE disallows overrides - want to see a practical example of this. Forgetting to override values in an inherited config file is a great way to do something bad in production systems; if the default value is not good enough, then forgetting to override that default value might easily cause trouble. For example default config setting of a container has a memory limit of 256MB but the application running in the container needs 512MB of memory to function properly; if the author of that application forgets to override, then that would impact the application when it is trying to run - often silently after deploying to prod :D  Does CUE help us combat this problem? I will continue reading for now and wait to know.</p><blockquote><p>Inheritance, is not commutative and idempotent in the general case. In other words, order matters. This makes it hard to track where values are coming from. This is not only true for humans, but also machines.</p></blockquote><h3 id="Other-config-languages"><a href="#Other-config-languages" class="headerlink" title="Other config languages"></a>Other config languages</h3><p>Some notes from the docs with comparison to other config languages:</p><blockquote><p>Like Jsonnet, CUE is a superset of JSON</p></blockquote><blockquote><p>CUE‚Äôs focus is data validation whereas Jsonnet focuses on data templating (boilerplate removal). Jsonnet was not designed with validation in mind.</p></blockquote><p>Here comes HCL (one of my favorite config languages):</p><blockquote><p>HCL has some striking similarities with GCL. But whether this was a coincidence or deliberate, it removes the core source of complexity of GCL: inheritance.</p></blockquote><blockquote><p>Also, whether the removal of inheritance was a coincidence or great insight, there is no construct given in return that one might need for larger scale configuration management. This means the use of HCL may hit a ceiling for medium to larger setups.</p></blockquote><h2 id="Data-Validation"><a href="#Data-Validation" class="headerlink" title="Data Validation"></a>Data Validation</h2><h3 id="Validating-YAML-and-JSON"><a href="#Validating-YAML-and-JSON" class="headerlink" title="Validating YAML and JSON"></a>Validating YAML and JSON</h3><p>one of the neat things about CUE is that it tries to play a bit nice with YAML and JSON whenever possible. A great example is how CUE could be used as a way to validate already existing YAML or JSON configurations.</p><p>I installed the <code>cue</code> tool on my machine at this point and thought of re-writing the example from docs to practice CUE.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cue vet --help </span><br><span class="line">vet validates CUE and other data files</span><br><span class="line"></span><br><span class="line">By default, it will only validate if there are no errors.</span><br><span class="line">The -c validates that all regular fields are concrete.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Checking non-CUE files</span><br><span class="line"></span><br><span class="line">Vet can also check non-CUE files. The following file formats are</span><br><span class="line">currently supported:</span><br><span class="line"></span><br><span class="line">  Format       Extensions</span><br><span class="line">JSON       .json .jsonl .ndjson</span><br><span class="line">YAML       .yaml .yml</span><br><span class="line">TEXT       .txt  (validate a single string value)</span><br><span class="line"></span><br><span class="line">To activate this mode, the non-cue files must be explicitly mentioned on the</span><br><span class="line">command line. There must also be at least one CUE file to hold the constraints.</span><br></pre></td></tr></table></figure><p>Let us consider a YAML config that is absurd.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">min:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">max:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p>Equivalent JSON file:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;min&quot;</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">&quot;max&quot;</span>: <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The above config is absurd because ‚Äúmin‚Äù is greater than ‚Äúmax‚Äù - what a contradiction! It seems like we could write a CUE file to check for these kinds of mistakes:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">min: *0 | number</span><br><span class="line">max: number &amp; &gt;min</span><br></pre></td></tr></table></figure><p>After writing the CUE check, we could vet it like this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cue vet check.cue range.json range.yaml </span><br><span class="line">max: invalid value 5 (out of bound &gt;10):</span><br><span class="line">    .&#x2F;check.cue:2:15</span><br><span class="line">    .&#x2F;range.json:3:10</span><br></pre></td></tr></table></figure><p>The above command first validates the JSON file and throws the error at that point and STOPs without showing the error for YAML file (Why so? Why can‚Äôt it continue? - maybe I will discover it afterward)</p><p>Fixing the error in JSON file and retrying <code>cue vet</code> shows the problem in the YAML file.</p><h2 id="Schema-Definition"><a href="#Schema-Definition" class="headerlink" title="Schema Definition"></a>Schema Definition</h2><p>I have written JSON Schema in the past to define the structure of what the configuration should look like. It also helps in the validation of the configuration. JSON Schema becomes very complex at scale. When you are past some point, it becomes very difficult to digest it.</p><p>CUE feels more readable than JSON Schema in the first look so far.</p><p>If we write Schema in CUE, there is a way to check if <code>v2</code> of schema is backward-compatible with <code>v1</code> of the schema. <a href="https://cuelang.org/docs/usecases/datadef/#validating-backwards-compatibility">This example</a> in the docs describes it very neatly. I guess there is a potential to use this to enhance tooling for all of us here.</p><blockquote><p>JSON Schema and OpenAPI are purely data-driven data definition standards. OpenAPI originates from Swagger. As of version 3, OpenAPI is more or less a subset of JSON Schema. OpenAPI is used to define Kubernetes Custom Resource Definitions</p></blockquote><p>To know that an alternative for the above technologies is emerging gives me a fresh breeze to me.</p><h2 id="Code-generation-and-extraction"><a href="#Code-generation-and-extraction" class="headerlink" title="Code generation and extraction"></a>Code generation and extraction</h2><p>As of writing this, it seems like we could extract CUE definitions from Go code and protobuf definitions. The docs don‚Äôt tell exactly how yet - but we might discover it afterward, I guess.</p><p>Also, it seems like CUE could be used to annotate Go source code, and Go structs could be validated with the help of that. Cue at this point plays nicely with Go (because it is written in Go) and I am guessing that it will play nice with other languages based on how it is getting adopted by the community.</p><h2 id="Querying"><a href="#Querying" class="headerlink" title="Querying"></a>Querying</h2><p>Just realized that CUE could act as a query language. Let us say that we have a 1000 lines of config and we would like to extract a few configs that match a certain constraint, then CUE might be used for this. Example: Give me all config settings, whose values are numbers.</p><p>I think right now we will have to use CUE API (via Go code) to perform these kinds of querying, but the docs called for discussion of use-cases if you have one!</p><h2 id="Scripting"><a href="#Scripting" class="headerlink" title="Scripting"></a>Scripting</h2><p>It seems like CUE is providing a scripting layer for data. The docs are suggesting to refer <code>cue help cmd</code> for more information at this point. </p><p>After reading that help section, I learned that cue places itself as an alternative to make files. We could have a <code>cue</code> file with various commands which perform some task when we run <code>cue cmd &lt;that_command_name&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">package project</span><br><span class="line"></span><br><span class="line">import &quot;tool&#x2F;exec&quot;</span><br><span class="line"></span><br><span class="line">command: hello: &#123;</span><br><span class="line">print: exec.Run &amp; &#123;</span><br><span class="line">cmd: &quot;echo hello&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We could also inject data from the environment with something like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package project</span><br><span class="line"></span><br><span class="line">import &quot;tool&#x2F;exec&quot;</span><br><span class="line"></span><br><span class="line">who: *&quot;world&quot; | string @tag(who_arg)</span><br><span class="line"></span><br><span class="line">command: hello: &#123;</span><br><span class="line">print: exec.Run &amp; &#123;</span><br><span class="line">cmd: &quot;echo hello \(who)&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The expression tripped me up at first, but by re-reading it slowly I was able to understand it more clearly. It defines <code>who</code> to either be of value ‚Äúworld‚Äù OR a value of type string which is injected by <code>who_arg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cue cmd hello</span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line">$ cue cmd --inject who_arg&#x3D;humans hello</span><br><span class="line">hello humans</span><br></pre></td></tr></table></figure><h1 id="Integrations"><a href="#Integrations" class="headerlink" title="Integrations"></a>Integrations</h1><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><blockquote><p>CUE is a superset of JSON: any valid JSON file is a valid CUE file. There is not much more integration you can get than that. The main motivation to make it a superset was to promote familiarity.</p></blockquote><p>While we are here, I would like to point out a style in CUE for an equivalent JSON.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;first&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;second&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;value&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>is usually written in CUE using a folded form like this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">first: second: key: &quot;value&quot;</span><br></pre></td></tr></table></figure><p>I ultimately checked the above line of CUE using the <code>cue export</code> command takes in CUE file and returns JSON/YAML.</p><p>Also, there is ‚Äúencoding/json‚Äù package in CUE‚Äôs scripting layer to manipulate JSON data in configuration.</p><h2 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h2><blockquote><p>Unlike with JSON, CUE is not a superset of YAML. One of the design goals of CUE was to be easily machine generatable and modifiable. The sensitivity to indentation and the lexical obscurity of the typing of tokens make YAML too bug prone for this purpose.</p></blockquote><p>That gave me a smile :D</p><p><code>cue vet</code> is your friend here. <code>encoding/yaml</code> package in the scripting layer to deal with YAML configs. I guess this is mainly to play nice with the existing ecosystem.</p><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><p>Cue is written in Go and so has nice integration with it.</p><p>The first thing is if you need a package at the scripting layer, you could probably do so by writing a Go package. Builtin packages that are available inside a CUE file are listed here: <a href="https://pkg.go.dev/cuelang.org/go/pkg">https://pkg.go.dev/cuelang.org/go/pkg</a></p><p>It seems like we could also import definitions into CUE from other Go code bases using this command:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cue get go k8s.io&#x2F;api&#x2F;core&#x2F;v1</span><br></pre></td></tr></table></figure><br>This enables us to do the following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &quot;k8s.io&#x2F;api&#x2F;core&#x2F;v1&quot;</span><br><span class="line"></span><br><span class="line">services: [string]: v1.#Service</span><br></pre></td></tr></table></figure><p>I would recommend reading this <a href="https://cuelang.org/docs/integrations/go/">doc</a> for getting more idea of what is possible here. One thing that might come in handy is if you are looking to build applications that take CUE files as config, you could parse the config from your Go program easily via <a href="https://pkg.go.dev/cuelang.org/go/cue#Runtime">https://pkg.go.dev/cuelang.org/go/cue#Runtime</a></p><h2 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a>Protobuf</h2><p>I started learning about CUE tonight with the idea that I could avoid writing YAML and JSON Schema with the help of this. But to my surprise, CUE is trying to help me not write Protobuf (which I am not a fan of).</p><h1 id="Continue-reading"><a href="#Continue-reading" class="headerlink" title="Continue reading"></a>Continue reading</h1><p>I would like to stop this blog post here because it is already morning :D I am a bit disappointed that I couldn‚Äôt discuss the philosophy behind CUE here - they are awesome; go read it for yourself from <a href="https://cuelang.org/docs/about/#philosophy-and-principles">here</a>.</p><p>Apart from that, I am going to continue reading the docs to learn more about CUE. Once I am a bit comfortable with it, I would like to peek into dagger to see how they have integrated with CUE.</p><p>Also, CUE stands for ‚ÄúConfigure Unify Execute‚Äù.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When I was working on &lt;a href=&quot;https://hasura.io/blog/what-we-learnt-by-migrating-from-circleci-to-buildkite&quot;&gt;this project&lt;/a&gt; at work, I
      
    
    </summary>
    
    
      <category term="programming" scheme="https://vishnubharathi.codes/tags/programming/"/>
    
      <category term="devops" scheme="https://vishnubharathi.codes/tags/devops/"/>
    
      <category term="cue" scheme="https://vishnubharathi.codes/tags/cue/"/>
    
  </entry>
  
</feed>
