<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Vishnu Bharathi</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vishnubharathi.codes/"/>
  <updated>2023-04-05T19:53:11.254Z</updated>
  <id>https://vishnubharathi.codes/</id>
  
  <author>
    <name>Vishnu Bharathi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How not to use context.WithValue in Go</title>
    <link href="https://vishnubharathi.codes/blog/context-with-value-pitfall/"/>
    <id>https://vishnubharathi.codes/blog/context-with-value-pitfall/</id>
    <published>2023-03-05T23:59:45.000Z</published>
    <updated>2023-04-05T19:53:11.254Z</updated>
    
    <content type="html"><![CDATA[<p>While working on my <a href="https://github.com/scriptnull/waymond">recent Go project</a>, I had a use-case where I wanted to pass a struct between two Go packages and I used <code>context.WithValue</code> to do it.</p><p>In retrospect while reading the Go docs for it, I believe I have gone against every possible rule for using it 😅 Sometimes you will have to try things out practically to get a lasting lesson.</p><p>This is such a case and I am going to share the lessons that I learned here.</p><p>All these lessons come from <a href="https://github.com/scriptnull/waymond/commit/f429fe9d0d6d1d7b1b6cdfe819a3f8c3eb7e9503">this single commit</a> - feel free to take a look at it if you are interested.</p><h2 id="my-use-case"><a href="#my-use-case" class="headerlink" title="my use-case"></a>my use-case</h2><p>I have three kinds of packages.</p><ul><li><code>main</code> package - starting point of my app</li><li><code>trigger</code>, <code>connector</code>, <code>scaler</code> packages - these are called from <code>main</code> and accept a context.</li><li><code>event</code> package which is initialized in <code>main</code> and is supposed to be used in the above packages</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// .....</span></span><br><span class="line"></span><br><span class="line">  eventBus, err := event.Init()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;error initializing the event bus&quot;</span>, err)</span><br><span class="line">os.Exit(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">ctx = context.WithValue(ctx, <span class="string">&quot;eventBus&quot;</span>, eventBus)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// .....</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> id, scaler := <span class="keyword">range</span> scalers &#123;</span><br><span class="line">err := scaler.Register(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">registerErrs = <span class="built_in">append</span>(registerErrs, err)</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// .....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Inside the scaler, I would do something like this.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *Scaler)</span> <span class="title">Register</span><span class="params">(ctx context.Context)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">  <span class="comment">// .....</span></span><br><span class="line"></span><br><span class="line">eventBus := ctx.Value(<span class="string">&quot;eventBus&quot;</span>).(event.Bus)</span><br><span class="line">eventBus.Subscribe(fmt.Sprintf(<span class="string">&quot;scaler.%s&quot;</span>, s.id), <span class="function"><span class="keyword">func</span><span class="params">(&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">// .....</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;)</span></span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// .....</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="what’s-wrong-here"><a href="#what’s-wrong-here" class="headerlink" title="what’s wrong here?"></a>what’s wrong here?</h2><p>This line <code>ctx = context.WithValue(ctx, &quot;eventBus&quot;, eventBus)</code> in <code>main.go</code> is what is wrong.</p><p>While trying to refactor, I accidentally removed that line from <code>main.go</code> and ran <code>go build</code>. Guess what? The build succeeded without any problem 😱</p><p>This is scary because the <code>eventBus</code> is at the core of my project. All the packages emit and subscribe to events via it. I would maybe expect a compiler error if something as obvious as not passing it to these packages was happening.</p><p>If we try to run the passing build, it would result in a runtime panic whenever we hit the code path where it was used. Because we are getting the <code>eventBus := ctx.Value(&quot;eventBus&quot;).(event.Bus)</code> at runtime and we missed setting that value via <code>context.WithValue</code>, we will get back a nil reference. Since that value is being used just after that <code>eventBus.Subscribe()</code>, it will lead to a runtime panic.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">panic: interface conversion: interface &#123;&#125; is nil, not event.Bus</span><br></pre></td></tr></table></figure><h2 id="Let-us-visit-the-docs"><a href="#Let-us-visit-the-docs" class="headerlink" title="Let us visit the docs"></a>Let us visit the docs</h2><p>It is time to visit <a href="https://pkg.go.dev/context#WithValue">the Go docs for context.WithValue</a></p><blockquote><p>WithValue returns a copy of parent in which the value associated with key is val.</p></blockquote><p>Yep, I did want value associated with my key.</p><blockquote><p>Use context Values only for request-scoped data that transits processes and APIs, not for passing optional parameters to functions.</p></blockquote><p>LOL, I was not even trying to pass an optional parameter, but a mandatory parameter.</p><blockquote><p>The provided key must be comparable and should not be of type string or any other built-in type to avoid collisions between packages using context.</p></blockquote><p>LOL, I was using string type.</p><blockquote><p>Users of WithValue should define their own types for keys.</p></blockquote><p>I did have this idea in mind and wanted to do it as a refactor.</p><blockquote><p>To avoid allocating when assigning to an interface{}, context keys often have concrete type struct{}. Alternatively, exported context key variables’ static type should be a pointer or interface.</p></blockquote><p>Okay, I still don’t fully understand this part because the example in the Go Doc seems to use the type of <code>string</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> favContextKey <span class="keyword">string</span></span><br><span class="line"></span><br><span class="line">k1 := favContextKey(<span class="string">&quot;k1&quot;</span>)</span><br><span class="line">k2 := favContextKey(<span class="string">&quot;k2&quot;</span>)</span><br></pre></td></tr></table></figure><p>I would have expected it to be something like this based on that last line from the docs</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> favContextKey <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">s1 := favContextKey&#123;&#125;</span><br><span class="line">s2 := favContextKey&#123;&#125;</span><br></pre></td></tr></table></figure><p>I am guessing <code>k1</code> and <code>k2</code> will result in memory allocation whereas <code>s1</code> and <code>s2</code> won’t. Could somebody confirm it for me?</p><h2 id="Then-how-to-use-context-WithValue"><a href="#Then-how-to-use-context-WithValue" class="headerlink" title="Then how to use context.WithValue"></a>Then how to use context.WithValue</h2><p>As the docs suggest, it is should be strictly used for carrying request-scoped data that ideally live only during the lifetime of a request.</p><p>Example: let us consider an http handler which gets called every time we make an http request to a client.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line">ctx := context.WithValue(r.Context(), requestID&#123;&#125;, r.Header.Get(<span class="string">&quot;X-Request-ID&quot;</span>))</span><br><span class="line">resp, err := someOtherAPI.client.Request(ctx)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>So, here the context is very specific to the handler and lives only throughout the lifetime of the handler. It is used to store a piece of information very specific to the request (i.e. the request-id of the request) and pass it to the downstream API requests which could make use of it.</p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>Two URLs on the internet helped me in my learning here:</p><ul><li>Go docs: <a href="https://pkg.go.dev/context#WithValue">https://pkg.go.dev/context#WithValue</a></li><li>This blog post from Dave Cheney: <a href="https://dave.cheney.net/2017/01/26/context-is-for-cancelation">https://dave.cheney.net/2017/01/26/context-is-for-cancelation</a> </li></ul><p>~ ~ ~ ~</p><p>I dedicate this to all people who are faced with the question of “should I pass down my logger in my go context?” in their busy lives. The answer is simple. Don’t do it.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;While working on my &lt;a href=&quot;https://github.com/scriptnull/waymond&quot;&gt;recent Go project&lt;/a&gt;, I had a use-case where I wanted to pass a stru
      
    
    </summary>
    
    
      <category term="go" scheme="https://vishnubharathi.codes/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>FOSS Hack 3.0</title>
    <link href="https://vishnubharathi.codes/blog/foss-hack-3-0/"/>
    <id>https://vishnubharathi.codes/blog/foss-hack-3-0/</id>
    <published>2023-03-05T15:54:07.000Z</published>
    <updated>2023-04-05T19:53:11.254Z</updated>
    
    <content type="html"><![CDATA[<p>After a long long time, I managed to attend a hackathon - <a href="https://fossunited.org/fosshack/2023">FOSS Hack 3.0</a></p><h2 id="Confession"><a href="#Confession" class="headerlink" title="Confession"></a>Confession</h2><p>I have a confession to make.</p><p>I have had a secret hackathon burnout all these years. The last time I attended a hackathon might have been in 2016 or 2017.</p><p>But this hackathon is different. I didn’t face any burnout or pressure.</p><p>Instead, I just kept working on what I wanted to work on.</p><p>One of the things that I did differently in this event compared to my previous hackathons is to work on a project that I would use in the real world.</p><p>In my previous hackathons, I used to work on some random app(s) or game(s) which was far out of my reach. This time: I had a well-scoped and practical idea.</p><p>Besides, this hackathon is very special to me - because it is for building Open-source software. How cool is it! (dreamed about something like this to happen in India around 2013-14-ish timeline)</p><h2 id="And-my-new-project-is"><a href="#And-my-new-project-is" class="headerlink" title="And my new project is"></a>And my new project is</h2><p>I worked on a new project called <a href="https://github.com/scriptnull/waymond">waymond</a> which I had been looking to get started on for a long time. I used the hackathon as an excuse to work on it 😀</p><blockquote><p>waymond is</p><ul><li>An open-source autoscaler.</li><li>Aiming to provide autoscaling for a wide variety of infrastructure.</li><li>Modular and extensible.</li><li>Built with Go.</li></ul></blockquote><p>The project’s <a href="https://github.com/scriptnull/waymond#readme">README</a> contains a good deal of information about the project if you are interested. If you find it useful/interesting, consider giving a 🌟 on <a href="https://github.com/scriptnull/waymond">GitHub</a> - helps with my dopamine levels 😅</p><p>I got the chance to learn some Go and explore some libraries while working on the project. I want to share all my learnings here in this blog. At the same time, I would love to keep working and maintaining the project moving forward.</p><h2 id="Progress"><a href="#Progress" class="headerlink" title="Progress"></a>Progress</h2><p>I was able to make <a href="https://github.com/scriptnull/waymond/releases/tag/v0.1.0">v0.1.0 release</a>:</p><ul><li>Helped me arrive at a design for the system</li><li>Helped me in prototyping a very basic use case</li><li>Helped me to write the “core” parts of the software. (of course, I might most probably need to refactor it once I have a better understanding)</li><li>Gave me the chance to write an elaborate README for the project</li></ul><p>I already prepared a thin milestone <a href="https://github.com/scriptnull/waymond/milestone/1">v0.2.0</a> for the project. The aim is to deploy it on real-world workloads (yeah, I do have them and will talk about it in detail once I am there)</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>I also recorded a <a href="https://youtu.be/DuKksePAJ_o">small demo</a> to show my progress so far (also needed to submit it at the end of the hackathon)</p><iframe width="560" height="315" src="https://www.youtube.com/embed/DuKksePAJ_o" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe><h2 id="Online-and-solo-this-time"><a href="#Online-and-solo-this-time" class="headerlink" title="Online and solo this time"></a>Online and solo this time</h2><p>It was happening both in-person and online. I attended it online, as I couldn’t travel to Bangalore at the moment.</p><p>Also, I had to do some solo hacking this time. Because the project that I have been working on is in its very early stages and it would have been hard to collaborate with a team. (so, I didn’t want to disturb my friends with lot of unknowns at this point.)</p><p>But I wished the opposite in both cases:</p><ul><li>I wished to attend it online.</li><li>I wished to work on it with a team.</li></ul><p>maybe next time!</p><p>But the good thing is I was able to make some decent progress on the project and it is already at an ok-ish level to accept Open Source contributions for it. So, if you are looking to contribute to an OSS project written in Go, then this is your chance! Take a look at the issue tracker <a href="https://github.com/scriptnull/waymond/issues">here</a>.</p><p>~ ~ ~ ~</p><p>I am still very shy to show my code, but it’s a hackathon project - so I hope you wouldn’t mind my 222 lines long <code>main.go</code> file.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;After a long long time, I managed to attend a hackathon - &lt;a href=&quot;https://fossunited.org/fosshack/2023&quot;&gt;FOSS Hack 3.0&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Co
      
    
    </summary>
    
    
      <category term="life" scheme="https://vishnubharathi.codes/tags/life/"/>
    
      <category term=" hackathon" scheme="https://vishnubharathi.codes/tags/hackathon/"/>
    
  </entry>
  
  <entry>
    <title>A small win</title>
    <link href="https://vishnubharathi.codes/blog/a-small-win/"/>
    <id>https://vishnubharathi.codes/blog/a-small-win/</id>
    <published>2023-03-03T01:22:05.000Z</published>
    <updated>2023-04-05T19:53:11.254Z</updated>
    
    <content type="html"><![CDATA[<p>What a beautiful morning! I am writing this blog post to tell about a small win (or rather small wins) that I had recently.</p><p>I read two self-help books last year:</p><ol><li><a href="https://www.goodreads.com/book/show/40121378-atomic-habits">Atomic Habits</a></li><li><a href="https://www.goodreads.com/book/show/25744928-deep-work">Deep work</a></li></ol><p>(I feel like that is pretty much the reading that I did last year 😅)</p><p>But the good thing is they got me more conscious about “habits” and “focus” - the two gateway drugs for me 😆</p><p>At the start of 2023, I finished reading one more self-help book: <a href="https://www.goodreads.com/book/show/17166225-the-miracle-morning">The morning miracle</a> randomly as it was lying around in our house. There was some marketing fluff inside it, but I was focused on the core concepts. I have been putting the techniques that I learned from it into a good amount of practice.</p><p>I didn’t have a mental model for “habits” when I started. Now after these books, I am kind of understanding it, I think 😊</p><p>So, with that, I am gonna share some of the small wins that I had recently.</p><h2 id="win-1-I-can-meditate-after-all"><a href="#win-1-I-can-meditate-after-all" class="headerlink" title="win #1 - I can meditate after all"></a>win #1 - I can meditate after all</h2><p>First, I continuously meditated for 11 days using an app called <a href="https://play.google.com/store/apps/details?id=com.subconscious.thrive&amp;hl=en_IN&amp;gl=US">Atom</a> - for 10 to 15 minutes a day.</p><p>The app grows a forest based on the points that you accrue after a meditation session.</p><p><img src="https://user-images.githubusercontent.com/4211715/222609659-99f2f4be-4c54-4168-bce1-806ff1877424.png" alt="image"></p><p>And then I missed it for 3 continuous days because of a family function. But had the intention to get back on track. (P.S. Thanks to “Atomic Habits” for teaching me the technique to get back on track when we are going out of sync. I think it said 2 days is the max threshold for missing out on a regular habit. Beyond that point, you might as well not continue the habit. So if we are missing a habit for 2 continuous days, that is when our internal alarm has to go off and think about why we missed it)</p><p>So, the forest looks like this now (on Day 19)</p><p><img src="https://user-images.githubusercontent.com/4211715/222611224-00093342-bf7e-4dce-8f9b-0609a6ea8db6.png" alt="image"></p><h2 id="win-2-I-can-journal-too"><a href="#win-2-I-can-journal-too" class="headerlink" title="win #2 - I can journal too"></a>win #2 - I can journal too</h2><p>I started writing a journal for less than 10 minutes every day. First I started to do it with <a href="https://logseq.com/">logseq</a>, but it was forcing me to switch on my computer early in the morning. So, I switched to a paper journal that I got as a gift.</p><p>My journal format is simple. one “Accomplishment” and one “Disappointment” that I had the previous day. That’s all I write.</p><p>Once a journal page is filled. I retrospect a bit and see if I need to embed new behaviors to help avoid the disappointments that I had.</p><p>(Thanks to the “morning miracle” book in this case, as it motivated me to try the habit of journalling)</p><h2 id="my-learnings"><a href="#my-learnings" class="headerlink" title="my learnings"></a>my learnings</h2><p>I have never done something like this before, yet having a good run now. The secret sauce that I learned is</p><p>“Start small” - like very very small. If it takes more than 2 minutes on day one, then you are over-doing it (again lessons from the books above)</p><p>~ ~ ~ ~</p><p>Bye, have a good day!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;What a beautiful morning! I am writing this blog post to tell about a small win (or rather small wins) that I had recently.&lt;/p&gt;
&lt;p&gt;I read
      
    
    </summary>
    
    
      <category term="life" scheme="https://vishnubharathi.codes/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>The absolute minimum things that I need to know about Helm</title>
    <link href="https://vishnubharathi.codes/blog/the-absolute-minimum-things-that-i-need-to-know-about-helm/"/>
    <id>https://vishnubharathi.codes/blog/the-absolute-minimum-things-that-i-need-to-know-about-helm/</id>
    <published>2023-01-12T19:57:30.000Z</published>
    <updated>2023-04-05T19:53:11.262Z</updated>
    
    <content type="html"><![CDATA[<p>I am learning about <a href="https://helm.sh/">helm</a>. It is a package manager for Kubernetes.</p><p>This documentation page provided me a good starting point: <a href="https://helm.sh/docs/topics/architecture/">https://helm.sh/docs/topics/architecture/</a> and then I roamed around the docs gathering the below notes.</p><p>The latest helm version as of writing this notes is <code>v3.10.3</code>.</p><p>(If something is wrong, feel free to suggest a fix as a pull request <a href="https://github.com/scriptnull/vishnubharathi.codes">here</a>)</p><ul><li>basics<ul><li>chart - kubernetes yaml definitions to run the app  </li><li>repository - collection of charts  </li><li>release - running instance of a chart. Two releases of same chart could be running at the same time in a kubernetes cluster (example: two redis instances used by different services)  </li></ul></li><li>helm repo add [name] [url]  <ul><li>add a repo to use the charts inside it.</li></ul></li><li>helm repo update  <ul><li>updates the list of charts available in the added repositories  </li></ul></li><li><p>versioning  </p><ul><li>a chart seem to contain two versions  <ul><li>chart version  </li><li>application version  </li></ul></li><li><p>example: vault’s chart and app versions  </p><blockquote><p>NAME               CHART VERSION    APP VERSION    DESCRIPTION<br>hashicorp/vault    0.23.0           1.12.1         Official HashiCorp Vault Chart  </p></blockquote></li></ul></li><li><p>helm search hub [query]  </p><ul><li>searches for charts in artifact hub  </li></ul></li><li>helm search repo [query]  <ul><li>searches for charts in locally added repositories  </li></ul></li><li><p>helm install [release_name] [chart]  </p><ul><li>You can also use <code>helm install [chart] --generate-name</code> if you wish to generate a release name automatically (example: <code>redis-TIMESTAMP</code>)  </li><li>the order in which the kubernetes resources mentioned in the chart are installed is document at <a href="https://helm.sh/docs/intro/using_helm/#helm-install-installing-a-package">https://helm.sh/docs/intro/using_helm/#helm-install-installing-a-package</a>  </li><li><blockquote><p>Helm does not wait until all of the resources are running before it exits. Many charts require Docker images that are over 600M in size, and may take a long time to install into the cluster.  </p></blockquote></li><li><p>Use <code>helm status</code> to get the state of the install  </p></li></ul></li><li>helm show values [chart]  <ul><li>You can customize the values that are configured in a chart before deploying a release  </li><li>This command will help you understand what values are available in a chart that could be modified  </li></ul></li><li>helm install -f values.yaml [release_name] [chart]  <ul><li>the vaules in <code>values.yaml</code> file will override the config values  </li></ul></li><li>Other methods of installing charts  <ul><li>A chart repository  </li><li>A local chart archive (<code>helm install foo foo-0.1.1.tgz</code>)  </li><li>An unpacked chart directory (<code>helm install foo path/to/foo</code>)  </li><li>A full URL (<code>helm install foo https://example.com/charts/foo-1.2.3.tgz</code>)  </li></ul></li><li><p>helm upgrade [release_name] [chart]  </p><ul><li><blockquote><p>When a new version of a chart is released, or when you want to change the configuration of your release, you can use the helm upgrade command.  </p></blockquote></li></ul></li><li><p>helm get values [release_name]  </p><ul><li>Useful in getting the values used in a release  </li></ul></li><li><p>helm rollback [release_name] [revision]  </p><ul><li><blockquote><p>The above rolls back our happy-panda to its very first release version. A release version is an incremental revision. Every time an install, upgrade, or rollback happens, the revision number is incremented by 1. The first revision number is always 1.  </p></blockquote></li></ul></li><li><p>helm list  </p><ul><li>Lists all the releases  </li></ul></li><li>helm history [release_name]  <ul><li>Lists all the revisions for a release  </li><li>You can then use <code>helm get values [release_name] --revision NUMBER</code> to get the values used in a particular revision  </li></ul></li><li>Helpful options during install/upgrade/rollback  <ul><li>–timeout  <ul><li>A <a href="https://golang.org/pkg/time/#ParseDuration">Go duration</a> value to wait for Kubernetes commands to complete. This defaults to <code>5m0s</code>.  </li></ul></li><li><code>--wait</code>: Waits until all Pods are in a ready state, PVCs are bound, Deployments have minimum (<code>Desired</code> minus <code>maxUnavailable</code>) Pods in ready state and Services have an IP address (and Ingress if a <code>LoadBalancer</code>) before marking the release as successful. It will wait for as long as the <code>--timeout</code> value. If timeout is reached, the release will be marked as <code>FAILED</code>  </li></ul></li><li>helm uninstall [release_name]  <ul><li>use <code>--keep-history</code> if you wish to the uninstalled release to show up in <code>helm list --all</code>  </li></ul></li><li>helm create [name]  <ul><li>for creating a new chart  </li></ul></li><li>helm package [folder_name]  <ul><li>should output a <code>*.tgz</code> file (known as chart archive, I guess)  </li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I am learning about &lt;a href=&quot;https://helm.sh/&quot;&gt;helm&lt;/a&gt;. It is a package manager for Kubernetes.&lt;/p&gt;
&lt;p&gt;This documentation page provided 
      
    
    </summary>
    
    
      <category term="helm" scheme="https://vishnubharathi.codes/tags/helm/"/>
    
      <category term="kubernetes" scheme="https://vishnubharathi.codes/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Reverse engineering Plausible&#39;s less than 1kb JS script</title>
    <link href="https://vishnubharathi.codes/blog/reverse-engineering-plausible-less-than-1kb-js-script/"/>
    <id>https://vishnubharathi.codes/blog/reverse-engineering-plausible-less-than-1kb-js-script/</id>
    <published>2023-01-08T00:32:14.000Z</published>
    <updated>2023-04-05T19:53:11.262Z</updated>
    
    <content type="html"><![CDATA[<p>⚠️ oops, I published this blog post by mistake before completing it 😅 LOL - I am not sure how to unpublish this now :D so I am going to leave this as it is and remove this warning line once the post is complete. ⚠️</p><p><a href="https://plausible.io/">Plausible</a> is “Simple and privacy-friendly Google Analytics alternative”. It is an open-source software. While trying to self-host it, I arrived at <a href="https://plausible.io/lightweight-web-analytics">a page</a> which talks about their less than 1kb analytics script. It got me curious about what would be inside it 🤔</p><p>So, here we go. Let us start to understand this from scratch.</p><h2 id="Adding-the-script"><a href="#Adding-the-script" class="headerlink" title="Adding the script"></a>Adding the script</h2><p>When you want to enable Plausible analytics for your website, it seems like you would start by adding this little snippet to your website.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">data-domain</span>=<span class="string">&quot;domain.com&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">&quot;https://plausible.io/js/script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>script</code> tag is used to load JavaScript on the webpage.</li><li><code>src</code> is the web address to the contents of the JavaScript.</li></ul><p>Bigger question here is, “what does <code>defer</code> and <code>data-domain</code> do?”</p><p>Reading through the MDN docs, I learnt that the browser would defer the execution of the JS script to a time when all of the HTML is loaded and parsed. That means all the HTML tags from <code>&lt;html&gt;....&lt;/html&gt;</code> would be present when the script gets executed.</p><p>More specfically, it seems like the script would get eexecuted before the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/DOMContentLoaded_event">DOMContentLoaded event</a>. This event waits only for the loading and parsing of HTML and does not wait for other things like stylesheets, images, etc. The more common <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event">load</a> seem to be responsible for catching the occurence of loading the HTML document and all its dependencies like the stylesheets, images, etc.</p><p>Okay, so this way the script doesn’t immediately try to load and block things and it waits for at-least a skeleton of HTML to load.</p><p>Regarding the <code>data-domain</code> part, I can’t seem to find references of it in the MDN docs for the script tag. So it is not an in-built attribute of the <code>script</code> tag. I think it might be a way of passing data from HTML to the JS script. Let us continue and see where this leads us.</p><h2 id="The-script"><a href="#The-script" class="headerlink" title="The script"></a>The script</h2><p>This is the entire script.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="string">&quot;use strict&quot;</span>;<span class="keyword">var</span> a=<span class="built_in">window</span>.location,r=<span class="built_in">window</span>.document,o=r.currentScript,s=o.getAttribute(<span class="string">&quot;data-api&quot;</span>)||<span class="keyword">new</span> URL(o.src).origin+<span class="string">&quot;/api/event&quot;</span>;<span class="function"><span class="keyword">function</span> <span class="title">l</span>(<span class="params">t</span>)</span>&#123;<span class="built_in">console</span>.warn(<span class="string">&quot;Ignoring Event: &quot;</span>+t)&#125;<span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">t,e</span>)</span>&#123;<span class="keyword">if</span>(<span class="regexp">/^localhost$|^127(\.[0-9]+)&#123;0,2&#125;\.[0-9]+$|^\[::1?\]$/</span>.test(a.hostname)||<span class="string">&quot;file:&quot;</span>===a.protocol)<span class="keyword">return</span> l(<span class="string">&quot;localhost&quot;</span>);<span class="keyword">if</span>(!(<span class="built_in">window</span>._phantom||<span class="built_in">window</span>.__nightmare||<span class="built_in">window</span>.navigator.webdriver||<span class="built_in">window</span>.Cypress))&#123;<span class="keyword">try</span>&#123;<span class="keyword">if</span>(<span class="string">&quot;true&quot;</span>===<span class="built_in">window</span>.localStorage.plausible_ignore)<span class="keyword">return</span> l(<span class="string">&quot;localStorage flag&quot;</span>)&#125;<span class="keyword">catch</span>(t)&#123;&#125;<span class="keyword">var</span> i=&#123;&#125;;i.n=t,i.u=a.href,i.d=o.getAttribute(<span class="string">&quot;data-domain&quot;</span>),i.r=r.referrer||<span class="literal">null</span>,i.w=<span class="built_in">window</span>.innerWidth,e&amp;&amp;e.meta&amp;&amp;(i.m=<span class="built_in">JSON</span>.stringify(e.meta)),e&amp;&amp;e.props&amp;&amp;(i.p=e.props);<span class="keyword">var</span> n=<span class="keyword">new</span> XMLHttpRequest;n.open(<span class="string">&quot;POST&quot;</span>,s,!<span class="number">0</span>),n.setRequestHeader(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;text/plain&quot;</span>),n.send(<span class="built_in">JSON</span>.stringify(i)),n.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="number">4</span>===n.readyState&amp;&amp;e&amp;&amp;e.callback&amp;&amp;e.callback()&#125;&#125;&#125;<span class="keyword">var</span> e=<span class="built_in">window</span>.plausible&amp;&amp;<span class="built_in">window</span>.plausible.q||[];<span class="built_in">window</span>.plausible=t;<span class="keyword">for</span>(<span class="keyword">var</span> i,n=<span class="number">0</span>;n&lt;e.length;n++)t.apply(<span class="built_in">this</span>,e[n]);<span class="function"><span class="keyword">function</span> <span class="title">p</span>(<span class="params"></span>)</span>&#123;i!==a.pathname&amp;&amp;(i=a.pathname,t(<span class="string">&quot;pageview&quot;</span>))&#125;<span class="keyword">var</span> w,d=<span class="built_in">window</span>.history;d.pushState&amp;&amp;(w=d.pushState,d.pushState=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;w.apply(<span class="built_in">this</span>,<span class="built_in">arguments</span>),p()&#125;,<span class="built_in">window</span>.addEventListener(<span class="string">&quot;popstate&quot;</span>,p)),<span class="string">&quot;prerender&quot;</span>===r.visibilityState?r.addEventListener(<span class="string">&quot;visibilitychange&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;i||<span class="string">&quot;visible&quot;</span>!==r.visibilityState||p()&#125;):p()&#125;();</span><br></pre></td></tr></table></figure><p>Feels small. Let me try to get some line breaks to make it more readable.</p><p>oh wait! Plausible is an Open Source Software. That means, I can try to get the source code of the un-minified version of the above code.</p><p>Going to the plausible <a href="https://github.com/plausible/analytics">github repo</a>, pressing “t” and typing “plausible.js” landed me to the file that is in need: <a href="https://github.com/plausible/analytics/blob/1772ddff17f5c2880400f7f7c42d7c1aa772feef/tracker/src/plausible.js">https://github.com/plausible/analytics/blob/1772ddff17f5c2880400f7f7c42d7c1aa772feef/tracker/src/plausible.js</a></p><p>Let us start reading the code now!</p><h2 id="The-code"><a href="#The-code" class="headerlink" title="The code"></a>The code</h2><p>The script starts with a good old immediately invoked anonymous function and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode">‘use strict’ notation</a>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">  &#x27;use strict&#x27;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>After that some variables and functions are getting defined.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> location = <span class="built_in">window</span>.location</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">document</span> = <span class="built_in">window</span>.document</span><br><span class="line"></span><br><span class="line">&#123;&#123;#<span class="keyword">if</span> compat&#125;&#125;</span><br><span class="line"><span class="keyword">var</span> scriptEl = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;plausible&#x27;</span>);</span><br><span class="line">&#123;&#123;<span class="keyword">else</span>&#125;&#125;</span><br><span class="line"><span class="keyword">var</span> scriptEl = <span class="built_in">document</span>.currentScript;</span><br><span class="line">&#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br><span class="line"><span class="keyword">var</span> endpoint = scriptEl.getAttribute(<span class="string">&#x27;data-api&#x27;</span>) || defaultEndpoint(scriptEl)</span><br></pre></td></tr></table></figure><p><code>location</code> and <code>document</code> are okay - probably defined to avoid typing <code>window</code> repeatedly. <code>&#123;&#123;#if compat&#125;&#125;</code> seems like a server-renered template language notation. They are using it to get a reference to the script element which is executing the plausible script. After that <code>endpoint</code> variable is set by picking the <code>data-api</code> if it is present on the script tag or by calling a function called <code>defaultEndpoint</code>.</p><p>Since the script tag doesn’t have the <code>data-api</code> attribute, let us look at what <code>defaultEndpoint</code> function does.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defaultEndpoint</span>(<span class="params">el</span>) </span>&#123;</span><br><span class="line">  &#123;&#123;#<span class="keyword">if</span> compat&#125;&#125;</span><br><span class="line">  <span class="keyword">var</span> pathArray = el.src.split( <span class="string">&#x27;/&#x27;</span> );</span><br><span class="line">  <span class="keyword">var</span> protocol = pathArray[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> host = pathArray[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">return</span> protocol + <span class="string">&#x27;//&#x27;</span> + host  + <span class="string">&#x27;/api/event&#x27;</span>;</span><br><span class="line">  &#123;&#123;<span class="keyword">else</span>&#125;&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> URL(el.src).origin + <span class="string">&#x27;/api/event&#x27;</span></span><br><span class="line">  &#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>At this point, I am guessing <code>compat</code> is for compatibility with old browsers. For now, my browser us comfortable using the <code>else</code> block. So, let us zoom on to that. It returns <code>new URL(el.src).origin + &#39;/api/event&#39;</code>. That means, it takes the script element’s src attribute and forms a new URL object and get’s the origin property.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; new URL(&quot;https:&#x2F;&#x2F;plausible.io&#x2F;js&#x2F;script.js&quot;).origin</span><br><span class="line"></span><br><span class="line">&#39;https:&#x2F;&#x2F;plausible.io&#39; + &#39;&#x2F;api&#x2F;event&#39;</span><br></pre></td></tr></table></figure><p>Moving on. There is this little <code>warn</code> function that is bugging myself to paste it here.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warn</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.warn(<span class="string">&#x27;Ignoring Event: &#x27;</span> + reason);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>I cleaned up all the server-side rendered templates to make code folding work for the script :D With that, we are entering the real action.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> queue = (<span class="built_in">window</span>.plausible &amp;&amp; <span class="built_in">window</span>.plausible.q) || []</span><br></pre></td></tr></table></figure><p>So, we are creating a queue which hopefully is getting saved in <code>window.plausible.q</code> object further down the lane.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.plausible = trigger</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; queue.length; i++) &#123;</span><br><span class="line">  trigger.apply(<span class="built_in">this</span>, queue[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>trigger</code> is a big function and is getting assigned to <code>window.plausible</code>. After that, we call <code>trigger</code> function for every element in the queue. Initially, the queue will be empty, so I am going to see what is happening when that is the case.</p><p>Now there is a divide happening.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;#<span class="keyword">if</span> hash&#125;&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>, page)</span><br><span class="line">&#123;&#123;<span class="keyword">else</span>&#125;&#125;</span><br><span class="line"><span class="keyword">var</span> his = <span class="built_in">window</span>.history</span><br><span class="line"><span class="keyword">if</span> (his.pushState) &#123;</span><br><span class="line">  <span class="keyword">var</span> originalPushState = his[<span class="string">&#x27;pushState&#x27;</span>]</span><br><span class="line">  his.pushState = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    originalPushState.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">    page();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;popstate&#x27;</span>, page)</span><br><span class="line">&#125;</span><br><span class="line">&#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br></pre></td></tr></table></figure><br>If the URL contains <code>#some-id</code> at the end, then the if block would be executed and if the URL doesn’t contain any reference to an HTML element identifier, then the <code>else</code> block is executed.</p><p>TIL that there is a DOM event called <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/hashchange_event">hashchange</a>.</p><blockquote><p>The hashchange event is fired when the fragment identifier of the URL has changed (the part of the URL beginning with and following the # symbol).</p></blockquote><p>So, if the page’s URL contains the <code>#</code> suffix, then this makes sures that the <code>page</code> function is executed after the fragment identified of the URL is changed.</p><p>In the other case, we seem to access <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/history">window.history</a>.</p><p>~ ~ ~ ~</p><p>To be continued.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;⚠️ oops, I published this blog post by mistake before completing it 😅 LOL - I am not sure how to unpublish this now :D so I am going to 
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://vishnubharathi.codes/tags/javascript/"/>
    
      <category term="tinkering" scheme="https://vishnubharathi.codes/tags/tinkering/"/>
    
  </entry>
  
</feed>
